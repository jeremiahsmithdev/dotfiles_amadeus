SCRIPT  /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/syntax/markdown.vim
Sourced 1 time
Total time:   0.020022
 Self time:   0.003273

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Markdown
                            " Maintainer:   Tim Pope <vimNOSPAM@tpope.org>
                            " Filenames:    *.markdown
                            " Last Change:  2020 Jan 14
                            
    1              0.000007 if exists("b:current_syntax")
                              finish
    1              0.000001 endif
                            
    1              0.000002 if !exists('main_syntax')
    1              0.000004   let main_syntax = 'markdown'
    1              0.000001 endif
                            
    1   0.018635   0.001887 runtime! syntax/html.vim
    1              0.000005 unlet! b:current_syntax
                            
    1              0.000005 if !exists('g:markdown_fenced_languages')
    1              0.000003   let g:markdown_fenced_languages = []
    1              0.000001 endif
    1              0.000003 let s:done_include = {}
    1              0.000007 for s:type in map(copy(g:markdown_fenced_languages),'matchstr(v:val,"[^=]*$")')
                              if has_key(s:done_include, matchstr(s:type,'[^.]*'))
                                continue
                              endif
                              if s:type =~ '\.'
                                let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\.\zs.*')
                              endif
                              exe 'syn include @markdownHighlight'.substitute(s:type,'\.','','g').' syntax/'.matchstr(s:type,'[^.]*').'.vim'
                              unlet! b:current_syntax
                              let s:done_include[matchstr(s:type,'[^.]*')] = 1
    1              0.000002 endfor
    1              0.000001 unlet! s:type
    1              0.000001 unlet! s:done_include
                            
    1              0.000003 if !exists('g:markdown_minlines')
    1              0.000002   let g:markdown_minlines = 50
    1              0.000001 endif
    1              0.000006 execute 'syn sync minlines=' . g:markdown_minlines
    1              0.000001 syn case ignore
                            
    1              0.000022 syn match markdownValid '[<>]\c[a-z/$!]\@!' transparent contains=NONE
    1              0.000005 syn match markdownValid '&\%(#\=\w*;\)\@!' transparent contains=NONE
                            
    1              0.000014 syn match markdownLineStart "^[<@]\@!" nextgroup=@markdownBlock,htmlSpecialChar
                            
    1              0.000064 syn cluster markdownBlock contains=markdownH1,markdownH2,markdownH3,markdownH4,markdownH5,markdownH6,markdownBlockquote,markdownListMarker,markdownOrderedListMarker,markdownCodeBlock,markdownRule
    1              0.000044 syn cluster markdownInline contains=markdownLineBreak,markdownLinkText,markdownItalic,markdownBold,markdownCode,markdownEscape,@htmlTop,markdownError,markdownValid
                            
    1              0.000022 syn match markdownH1 "^.\+\n=\+$" contained contains=@markdownInline,markdownHeadingRule,markdownAutomaticLink
    1              0.000008 syn match markdownH2 "^.\+\n-\+$" contained contains=@markdownInline,markdownHeadingRule,markdownAutomaticLink
                            
    1              0.000003 syn match markdownHeadingRule "^[=-]\+$" contained
                            
    1              0.000018 syn region markdownH1 matchgroup=markdownH1Delimiter start="##\@!"      end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000019 syn region markdownH2 matchgroup=markdownH2Delimiter start="###\@!"     end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000012 syn region markdownH3 matchgroup=markdownH3Delimiter start="####\@!"    end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000011 syn region markdownH4 matchgroup=markdownH4Delimiter start="#####\@!"   end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000011 syn region markdownH5 matchgroup=markdownH5Delimiter start="######\@!"  end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
    1              0.000011 syn region markdownH6 matchgroup=markdownH6Delimiter start="#######\@!" end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
                            
    1              0.000004 syn match markdownBlockquote ">\%(\s\|$\)" contained nextgroup=@markdownBlock
                            
    1              0.000008 syn region markdownCodeBlock start="    \|\t" end="$" contained
                            
                            " TODO: real nesting
    1              0.000006 syn match markdownListMarker "\%(\t\| \{0,4\}\)[-*+]\%(\s\+\S\)\@=" contained
    1              0.000005 syn match markdownOrderedListMarker "\%(\t\| \{0,4}\)\<\d\+\.\%(\s\+\S\)\@=" contained
                            
    1              0.000004 syn match markdownRule "\* *\* *\*[ *]*$" contained
    1              0.000003 syn match markdownRule "- *- *-[ -]*$" contained
                            
    1              0.000003 syn match markdownLineBreak " \{2,\}$"
                            
    1              0.000024 syn region markdownIdDeclaration matchgroup=markdownLinkDelimiter start="^ \{0,3\}!\=\[" end="\]:" oneline keepend nextgroup=markdownUrl skipwhite
    1              0.000010 syn match markdownUrl "\S\+" nextgroup=markdownUrlTitle skipwhite contained
    1              0.000010 syn region markdownUrl matchgroup=markdownUrlDelimiter start="<" end=">" oneline keepend nextgroup=markdownUrlTitle skipwhite contained
    1              0.000010 syn region markdownUrlTitle matchgroup=markdownUrlTitleDelimiter start=+"+ end=+"+ keepend contained
    1              0.000004 syn region markdownUrlTitle matchgroup=markdownUrlTitleDelimiter start=+'+ end=+'+ keepend contained
    1              0.000003 syn region markdownUrlTitle matchgroup=markdownUrlTitleDelimiter start=+(+ end=+)+ keepend contained
                            
    1              0.000035 syn region markdownLinkText matchgroup=markdownLinkTextDelimiter start="!\=\[\%(\%(\_[^][]\|\[\_[^][]*\]\)*]\%( \=[[(]\)\)\@=" end="\]\%( \=[[(]\)\@=" nextgroup=markdownLink,markdownId skipwhite contains=@markdownInline,markdownLineStart
    1              0.000005 syn region markdownLink matchgroup=markdownLinkDelimiter start="(" end=")" contains=markdownUrl keepend contained
    1              0.000009 syn region markdownId matchgroup=markdownIdDelimiter start="\[" end="\]" keepend contained
    1              0.000007 syn region markdownAutomaticLink matchgroup=markdownUrlDelimiter start="<\%(\w\+:\|[[:alnum:]_+-]\+@\)\@=" end=">" keepend oneline
                            
    1              0.000002 let s:concealends = ''
    1              0.000005 if has('conceal') && get(g:, 'markdown_syntax_conceal', 1) == 1
    1              0.000002   let s:concealends = ' concealends'
    1              0.000001 endif
    1              0.000020 exe 'syn region markdownItalic matchgroup=markdownItalicDelimiter start="\S\@<=\*\|\*\S\@=" end="\S\@<=\*\|\*\S\@=" skip="\\\*" contains=markdownLineStart,@Spell' . s:concealends
    1              0.000013 exe 'syn region markdownItalic matchgroup=markdownItalicDelimiter start="\w\@<!_\S\@=" end="\S\@<=_\w\@!" skip="\\_" contains=markdownLineStart,@Spell' . s:concealends
    1              0.000019 exe 'syn region markdownBold matchgroup=markdownBoldDelimiter start="\S\@<=\*\*\|\*\*\S\@=" end="\S\@<=\*\*\|\*\*\S\@=" skip="\\\*" contains=markdownLineStart,markdownItalic,@Spell' . s:concealends
    1              0.000012 exe 'syn region markdownBold matchgroup=markdownBoldDelimiter start="\w\@<!__\S\@=" end="\S\@<=__\w\@!" skip="\\_" contains=markdownLineStart,markdownItalic,@Spell' . s:concealends
    1              0.000022 exe 'syn region markdownBoldItalic matchgroup=markdownBoldItalicDelimiter start="\S\@<=\*\*\*\|\*\*\*\S\@=" end="\S\@<=\*\*\*\|\*\*\*\S\@=" skip="\\\*" contains=markdownLineStart,@Spell' . s:concealends
    1              0.000011 exe 'syn region markdownBoldItalic matchgroup=markdownBoldItalicDelimiter start="\w\@<!___\S\@=" end="\S\@<=___\w\@!" skip="\\_" contains=markdownLineStart,@Spell' . s:concealends
                            
    1              0.000015 syn region markdownCode matchgroup=markdownCodeDelimiter start="`" end="`" keepend contains=markdownLineStart
    1              0.000011 syn region markdownCode matchgroup=markdownCodeDelimiter start="`` \=" end=" \=``" keepend contains=markdownLineStart
    1              0.000010 syn region markdownCode matchgroup=markdownCodeDelimiter start="^\s*````*.*$" end="^\s*````*\ze\s*$" keepend
                            
    1              0.000011 syn match markdownFootnote "\[^[^\]]\+\]"
    1              0.000010 syn match markdownFootnoteDefinition "^\[^[^\]]\+\]:"
                            
    1              0.000002 if main_syntax ==# 'markdown'
    1              0.000002   let s:done_include = {}
    1              0.000002   for s:type in g:markdown_fenced_languages
                                if has_key(s:done_include, matchstr(s:type,'[^.]*'))
                                  continue
                                endif
                                exe 'syn region markdownHighlight'.substitute(matchstr(s:type,'[^=]*$'),'\..*','','').' matchgroup=markdownCodeDelimiter start="^\s*````*\s*\%({.\{-}\.\)\='.matchstr(s:type,'[^=]*').'}\=\S\@!.*$" end="^\s*````*\ze\s*$" keepend contains=@markdownHighlight'.substitute(matchstr(s:type,'[^=]*$'),'\.','','g') . s:concealends
                                let s:done_include[matchstr(s:type,'[^.]*')] = 1
    1              0.000001   endfor
    1              0.000001   unlet! s:type
    1              0.000001   unlet! s:done_include
    1              0.000001 endif
                            
    1              0.000005 syn match markdownEscape "\\[][\\`*_{}()<>#+.!-]"
    1              0.000003 syn match markdownError "\w\@<=_\w\@="
                            
    1              0.000009 hi def link markdownH1                    htmlH1
    1              0.000008 hi def link markdownH2                    htmlH2
    1              0.000002 hi def link markdownH3                    htmlH3
    1              0.000002 hi def link markdownH4                    htmlH4
    1              0.000002 hi def link markdownH5                    htmlH5
    1              0.000002 hi def link markdownH6                    htmlH6
    1              0.000002 hi def link markdownHeadingRule           markdownRule
    1              0.000005 hi def link markdownH1Delimiter           markdownHeadingDelimiter
    1              0.000005 hi def link markdownH2Delimiter           markdownHeadingDelimiter
    1              0.000004 hi def link markdownH3Delimiter           markdownHeadingDelimiter
    1              0.000004 hi def link markdownH4Delimiter           markdownHeadingDelimiter
    1              0.000006 hi def link markdownH5Delimiter           markdownHeadingDelimiter
    1              0.000006 hi def link markdownH6Delimiter           markdownHeadingDelimiter
    1              0.000010 hi def link markdownHeadingDelimiter      Delimiter
    1              0.000002 hi def link markdownOrderedListMarker     markdownListMarker
    1              0.000003 hi def link markdownListMarker            htmlTagName
    1              0.000005 hi def link markdownBlockquote            Comment
    1              0.000005 hi def link markdownRule                  PreProc
                            
    1              0.000005 hi def link markdownFootnote              Typedef
    1              0.000005 hi def link markdownFootnoteDefinition    Typedef
                            
    1              0.000006 hi def link markdownLinkText              htmlLink
    1              0.000005 hi def link markdownIdDeclaration         Typedef
    1              0.000005 hi def link markdownId                    Type
    1              0.000001 hi def link markdownAutomaticLink         markdownUrl
    1              0.000005 hi def link markdownUrl                   Float
    1              0.000006 hi def link markdownUrlTitle              String
    1              0.000001 hi def link markdownIdDelimiter           markdownLinkDelimiter
    1              0.000002 hi def link markdownUrlDelimiter          htmlTag
    1              0.000006 hi def link markdownUrlTitleDelimiter     Delimiter
                            
    1              0.000002 hi def link markdownItalic                htmlItalic
    1              0.000001 hi def link markdownItalicDelimiter       markdownItalic
    1              0.000002 hi def link markdownBold                  htmlBold
    1              0.000001 hi def link markdownBoldDelimiter         markdownBold
    1              0.000002 hi def link markdownBoldItalic            htmlBoldItalic
    1              0.000001 hi def link markdownBoldItalicDelimiter   markdownBoldItalic
    1              0.000005 hi def link markdownCodeDelimiter         Delimiter
                            
    1              0.000005 hi def link markdownEscape                Special
    1              0.000005 hi def link markdownError                 Error
                            
    1              0.000002 let b:current_syntax = "markdown"
    1              0.000002 if main_syntax ==# 'markdown'
    1              0.000001   unlet main_syntax
    1              0.000001 endif
                            
                            " vim:set sw=2:

SCRIPT  /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/syntax/html.vim
Sourced 1 time
Total time:   0.016730
 Self time:   0.005109

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:             HTML
                            " Previous Maintainer:  Jorge Maldonado Ventura <jorgesumle@freakspot.net>
                            " Previous Maintainer:  Claudio Fleiner <claudio@fleiner.com>
                            " Repository:           https://notabug.org/jorgesumle/vim-html-syntax
                            " Last Change:          2021 Mar 02
                            "			Included patch #7900 to fix comments
                            "			Included patch #7916 to fix a few more things
                            "
                            
                            " Please check :help html.vim for some comments and a description of the options
                            
                            " quit when a syntax file was already loaded
    1              0.000006 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'html'
    1              0.000001 endif
                            
    1              0.000013 let s:cpo_save = &cpo
    1              0.000015 set cpo&vim
                            
    1              0.000002 syntax spell toplevel
                            
    1              0.000001 syn case ignore
                            
                            " mark illegal characters
    1              0.000030 syn match htmlError "[<>&]"
                            
                            
                            " tags
    1              0.000021 syn region  htmlString   contained start=+"+ end=+"+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
    1              0.000007 syn region  htmlString   contained start=+'+ end=+'+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
    1              0.000011 syn match   htmlValue    contained "=[\t ]*[^'" \t>][^ \t>]*"hs=s+1   contains=javaScriptExpression,@htmlPreproc
    1              0.000016 syn region  htmlEndTag             start=+</+      end=+>+ contains=htmlTagN,htmlTagError
    1              0.000024 syn region  htmlTag                start=+<[^/]+   end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
    1              0.000017 syn match   htmlTagN     contained +<\s*[-a-zA-Z0-9]\++hs=s+1 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
    1              0.000006 syn match   htmlTagN     contained +</\s*[-a-zA-Z0-9]\++hs=s+2 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
    1              0.000003 syn match   htmlTagError contained "[^>]<"ms=s+1
                            
                            
                            " tag names
    1              0.000004 syn keyword htmlTagName contained address applet area a base basefont
    1              0.000003 syn keyword htmlTagName contained big blockquote br caption center
    1              0.000004 syn keyword htmlTagName contained cite code dd dfn dir div dl dt font
    1              0.000002 syn keyword htmlTagName contained form hr html img
    1              0.000003 syn keyword htmlTagName contained input isindex kbd li link map menu
    1              0.000003 syn keyword htmlTagName contained meta ol option param pre p samp span
    1              0.000004 syn keyword htmlTagName contained select small sub sup
    1              0.000009 syn keyword htmlTagName contained table td textarea th tr tt ul var xmp
    1              0.000007 syn match htmlTagName contained "\<\(b\|i\|u\|h[1-6]\|em\|strong\|head\|body\|title\)\>"
                            
                            " new html 4.0 tags
    1              0.000003 syn keyword htmlTagName contained abbr acronym bdo button col label
    1              0.000002 syn keyword htmlTagName contained colgroup fieldset iframe ins legend
    1              0.000003 syn keyword htmlTagName contained object optgroup q s tbody tfoot thead
                            
                            " new html 5 tags
    1              0.000002 syn keyword htmlTagName contained article aside audio bdi canvas data
    1              0.000002 syn keyword htmlTagName contained datalist details dialog embed figcaption
    1              0.000002 syn keyword htmlTagName contained figure footer header hgroup keygen main
    1              0.000002 syn keyword htmlTagName contained mark menuitem meter nav output picture
    1              0.000002 syn keyword htmlTagName contained progress rb rp rt rtc ruby section
    1              0.000003 syn keyword htmlTagName contained slot source summary template time track
    1              0.000001 syn keyword htmlTagName contained video wbr
                            
                            " legal arg names
    1              0.000001 syn keyword htmlArg contained action
    1              0.000002 syn keyword htmlArg contained align alink alt archive background bgcolor
    1              0.000002 syn keyword htmlArg contained border bordercolor cellpadding
    1              0.000003 syn keyword htmlArg contained cellspacing checked class clear code codebase color
    1              0.000003 syn keyword htmlArg contained cols colspan content coords enctype face
    1              0.000002 syn keyword htmlArg contained gutter height hspace id
    1              0.000002 syn keyword htmlArg contained link lowsrc marginheight
    1              0.000002 syn keyword htmlArg contained marginwidth maxlength method name prompt
    1              0.000003 syn keyword htmlArg contained rel rev rows rowspan scrolling selected shape
    1              0.000003 syn keyword htmlArg contained size src start target text type url
    1              0.000003 syn keyword htmlArg contained usemap ismap valign value vlink vspace width wrap
    1              0.000005 syn match   htmlArg contained "\<\(http-equiv\|href\|title\)="me=e-1
                            
                            " aria attributes
    1              0.000070 exe 'syn match htmlArg contained "\<aria-\%(' . join([
                                \ 'activedescendant', 'atomic', 'autocomplete', 'busy', 'checked', 'colcount',
                                \ 'colindex', 'colspan', 'controls', 'current', 'describedby', 'details',
                                \ 'disabled', 'dropeffect', 'errormessage', 'expanded', 'flowto', 'grabbed',
                                \ 'haspopup', 'hidden', 'invalid', 'keyshortcuts', 'label', 'labelledby', 'level',
                                \ 'live', 'modal', 'multiline', 'multiselectable', 'orientation', 'owns',
                                \ 'placeholder', 'posinset', 'pressed', 'readonly', 'relevant', 'required',
                                \ 'roledescription', 'rowcount', 'rowindex', 'rowspan', 'selected', 'setsize',
                                \ 'sort', 'valuemax', 'valuemin', 'valuenow', 'valuetext'
                                \ ], '\|') . '\)\>"'
    1              0.000002 syn keyword htmlArg contained role
                            
                            " Netscape extensions
    1              0.000002 syn keyword htmlTagName contained frame noframes frameset nobr blink
    1              0.000016 syn keyword htmlTagName contained layer ilayer nolayer spacer
    1              0.000012 syn keyword htmlArg     contained frameborder noresize pagex pagey above below
    1              0.000010 syn keyword htmlArg     contained left top visibility clip id noshade
    1              0.000003 syn match   htmlArg     contained "\<z-index\>"
                            
                            " Microsoft extensions
    1              0.000003 syn keyword htmlTagName contained marquee
                            
                            " html 4.0 arg names
    1              0.000004 syn match   htmlArg contained "\<\(accept-charset\|label\)\>"
    1              0.000012 syn keyword htmlArg contained abbr accept accesskey axis char charoff charset
    1              0.000009 syn keyword htmlArg contained cite classid codetype compact data datetime
    1              0.000008 syn keyword htmlArg contained declare defer dir disabled for frame
    1              0.000010 syn keyword htmlArg contained headers hreflang lang language longdesc
    1              0.000003 syn keyword htmlArg contained multiple nohref nowrap object profile readonly
    1              0.000003 syn keyword htmlArg contained rules scheme scope span standby style
    1              0.000002 syn keyword htmlArg contained summary tabindex valuetype version
                            
                            " html 5 arg names
    1              0.000002 syn keyword htmlArg contained allowfullscreen async autocomplete autofocus
    1              0.000003 syn keyword htmlArg contained autoplay challenge contenteditable contextmenu
    1              0.000003 syn keyword htmlArg contained controls crossorigin default dirname download
    1              0.000003 syn keyword htmlArg contained draggable dropzone form formaction formenctype
    1              0.000002 syn keyword htmlArg contained formmethod formnovalidate formtarget hidden
    1              0.000003 syn keyword htmlArg contained high icon inputmode keytype kind list loop low
    1              0.000003 syn keyword htmlArg contained max min minlength muted nonce novalidate open
    1              0.000002 syn keyword htmlArg contained optimum pattern placeholder poster preload
    1              0.000002 syn keyword htmlArg contained radiogroup required reversed sandbox spellcheck
    1              0.000003 syn keyword htmlArg contained sizes srcset srcdoc srclang step title translate
    1              0.000001 syn keyword htmlArg contained typemustmatch
                            
                            " special characters
    1              0.000007 syn match htmlSpecialChar "&#\=[0-9A-Za-z]\{1,8};"
                            
                            " Comments (the real ones or the old netscape ones)
    1              0.000003 if exists("html_wrong_comments")
                              syn region htmlComment        start=+<!--+    end=+--\s*>+    contains=@Spell
    1              0.000001 else
                              " The HTML 5.2 syntax 8.2.4.41: bogus comment is parser error; browser skips until next &gt
    1              0.000014   syn region htmlComment        start=+<!+      end=+>+         contains=htmlCommentError keepend
                              " Idem 8.2.4.42,51: Comment starts with <!-- and ends with -->
                              " Idem 8.2.4.43,44: Except <!--> and <!---> are parser errors
                              " Idem 8.2.4.52: dash-dash-bang (--!>) is error ignored by parser, also closes comment
    1              0.000013   syn region htmlComment matchgroup=htmlComment start=+<!--\%(-\?>\)\@!+        end=+--!\?>+    contains=htmlCommentNested,@htmlPreProc,@Spell keepend
                              " Idem 8.2.4.49: nested comment is parser error, except <!--> is all right
    1              0.000003   syn match htmlCommentNested contained "<!-->\@!"
    1              0.000003   syn match htmlCommentError  contained "[^><!]"
    1              0.000001 endif
    1              0.000005 syn region htmlComment  start=+<!DOCTYPE+       end=+>+ keepend
                            
                            " server-parsed commands
    1              0.000019 syn region htmlPreProc start=+<!--#+ end=+-->+ contains=htmlPreStmt,htmlPreError,htmlPreAttr
    1              0.000011 syn match htmlPreStmt contained "<!--#\(config\|echo\|exec\|fsize\|flastmod\|include\|printenv\|set\|if\|elif\|else\|endif\|geoguide\)\>"
    1              0.000003 syn match htmlPreError contained "<!--#\S*"ms=s+4
    1              0.000012 syn match htmlPreAttr contained "\w\+=[^"]\S\+" contains=htmlPreProcAttrError,htmlPreProcAttrName
    1              0.000008 syn region htmlPreAttr contained start=+\w\+="+ skip=+\\\\\|\\"+ end=+"+ contains=htmlPreProcAttrName keepend
    1              0.000003 syn match htmlPreProcAttrError contained "\w\+="he=e-1
    1              0.000007 syn match htmlPreProcAttrName contained "\(expr\|errmsg\|sizefmt\|timefmt\|var\|cgi\|cmd\|file\|virtual\|value\)="he=e-1
                            
    1              0.000003 if !exists("html_no_rendering")
                              " rendering
    1              0.000016   syn cluster htmlTop contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,javaScript,@htmlPreproc
                            
    1              0.000010   syn region htmlStrike start="<del\>" end="</del\_s*>"me=s-1 contains=@htmlTop
    1              0.000007   syn region htmlStrike start="<strike\>" end="</strike\_s*>"me=s-1 contains=@htmlTop
                            
    1              0.000017   syn region htmlBold start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
    1              0.000008   syn region htmlBold start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
    1              0.000009   syn region htmlBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
    1              0.000009   syn region htmlBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
    1              0.000006   syn region htmlBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
    1              0.000005   syn region htmlBoldUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
    1              0.000005   syn region htmlBoldUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
    1              0.000006   syn region htmlBoldItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
                            
    1              0.000018   syn region htmlUnderline start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBold,htmlUnderlineItalic
    1              0.000009   syn region htmlUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
    1              0.000007   syn region htmlUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
    1              0.000011   syn region htmlUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
    1              0.000019   syn region htmlUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
    1              0.000007   syn region htmlUnderlineItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
    1              0.000006   syn region htmlUnderlineItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
    1              0.000005   syn region htmlUnderlineBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
    1              0.000005   syn region htmlUnderlineBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
                            
    1              0.000016   syn region htmlItalic start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlItalicBold,htmlItalicUnderline
    1              0.000005   syn region htmlItalic start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
    1              0.000009   syn region htmlItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
    1              0.000006   syn region htmlItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
    1              0.000006   syn region htmlItalicBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop
    1              0.000010   syn region htmlItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlItalicUnderlineBold
    1              0.000005   syn region htmlItalicUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
    1              0.000006   syn region htmlItalicUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
                            
    1              0.000007   syn match htmlLeadingSpace "^\s\+" contained
    1              0.000012   syn region htmlLink start="<a\>\_[^>]*\<href\>" end="</a\_s*>"me=s-1 contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLeadingSpace,javaScript,@htmlPreproc
    1              0.000017   syn region htmlH1 start="<h1\>" end="</h1\_s*>"me=s-1 contains=@htmlTop
    1              0.000007   syn region htmlH2 start="<h2\>" end="</h2\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlH3 start="<h3\>" end="</h3\_s*>"me=s-1 contains=@htmlTop
    1              0.000009   syn region htmlH4 start="<h4\>" end="</h4\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlH5 start="<h5\>" end="</h5\_s*>"me=s-1 contains=@htmlTop
    1              0.000008   syn region htmlH6 start="<h6\>" end="</h6\_s*>"me=s-1 contains=@htmlTop
    1              0.000027   syn region htmlHead start="<head\>" end="</head\_s*>"me=s-1 end="<body\>"me=s-1 end="<h[1-6]\>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,htmlTitle,javaScript,cssStyle,@htmlPreproc
    1              0.000010   syn region htmlTitle start="<title\>" end="</title\_s*>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,javaScript,@htmlPreproc
    1              0.000001 endif
                            
    1              0.000002 syn keyword htmlTagName         contained noscript
    1              0.000002 syn keyword htmlSpecialTagName  contained script style
    1              0.000003 if main_syntax != 'java' || exists("java_javascript")
                              " JAVA SCRIPT
    1   0.001795   0.000618   syn include @htmlJavaScript syntax/javascript.vim
    1              0.000003   unlet b:current_syntax
    1              0.000026   syn region  javaScript start=+<script\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlJavaScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
    1              0.000026   syn region  htmlScriptTag     contained start=+<script+ end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent
    1              0.000003   hi def link htmlScriptTag htmlTag
                            
                              " html events (i.e. arguments that include javascript commands)
    1              0.000005   if exists("html_extended_events")
                                syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ contains=htmlEventSQ
                                syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ contains=htmlEventDQ
    1              0.000001   else
    1              0.000006     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ keepend contains=htmlEventSQ
    1              0.000005     syn region htmlEvent        contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ keepend contains=htmlEventDQ
    1              0.000001   endif
    1              0.000005   syn region htmlEventSQ        contained start=+'+ms=s+1 end=+'+me=s-1 contains=@htmlJavaScript
    1              0.000004   syn region htmlEventDQ        contained start=+"+ms=s+1 end=+"+me=s-1 contains=@htmlJavaScript
    1              0.000002   hi def link htmlEventSQ htmlEvent
    1              0.000001   hi def link htmlEventDQ htmlEvent
                            
                              " a javascript expression is used as an arg value
    1              0.000006   syn region  javaScriptExpression contained start=+&{+ keepend end=+};+ contains=@htmlJavaScript,@htmlPreproc
    1              0.000001 endif
                            
    1              0.000003 if main_syntax != 'java' || exists("java_vb")
                              " VB SCRIPT
    1   0.003068   0.000592   syn include @htmlVbScript syntax/vb.vim
    1              0.000003   unlet b:current_syntax
    1              0.000016   syn region  javaScript start=+<script \_[^>]*language *=\_[^>]*vbscript\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlVbScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
    1              0.000001 endif
                            
    1              0.000004 syn cluster htmlJavaScript      add=@htmlPreproc
                            
    1              0.000005 if main_syntax != 'java' || exists("java_css")
                              " embedded style sheets
    1              0.000003   syn keyword htmlArg           contained media
    1   0.008581   0.000613   syn include @htmlCss syntax/css.vim
    1              0.000003   unlet b:current_syntax
    1              0.000021   syn region cssStyle start=+<style+ keepend end=+</style>+ contains=@htmlCss,htmlTag,htmlEndTag,htmlCssStyleComment,@htmlPreproc
    1              0.000005   syn match htmlCssStyleComment contained "\(<!--\|-->\)"
    1              0.001123   syn region htmlCssDefinition matchgroup=htmlArg start='style="' keepend matchgroup=htmlString end='"' contains=css.*Attr,css.*Prop,cssComment,cssLength,cssColor,cssURL,cssImportant,cssError,cssString,@htmlPreproc
    1              0.000008   hi def link htmlStyleArg htmlString
    1              0.000001 endif
                            
    1              0.000003 if main_syntax == "html"
                              " synchronizing (does not always work if a comment includes legal
                              " html tags, but doing it right would mean to always start
                              " at the first line, which is too slow)
                              syn sync match htmlHighlight groupthere NONE "<[/a-zA-Z]"
                              syn sync match htmlHighlight groupthere javaScript "<script"
                              syn sync match htmlHighlightSkip "^.*['\"].*$"
                              syn sync minlines=10
    1              0.000001 endif
                            
                            " The default highlighting.
    1              0.000006 hi def link htmlTag                     Function
    1              0.000006 hi def link htmlEndTag                  Identifier
    1              0.000008 hi def link htmlArg                     Type
    1              0.000008 hi def link htmlTagName                 htmlStatement
    1              0.000005 hi def link htmlSpecialTagName          Exception
    1              0.000006 hi def link htmlValue                   String
    1              0.000006 hi def link htmlSpecialChar             Special
                            
    1              0.000004 if !exists("html_no_rendering")
    1              0.000011   hi def link htmlH1                      Title
    1              0.000007   hi def link htmlH2                      htmlH1
    1              0.000005   hi def link htmlH3                      htmlH2
    1              0.000003   hi def link htmlH4                      htmlH3
    1              0.000002   hi def link htmlH5                      htmlH4
    1              0.000002   hi def link htmlH6                      htmlH5
    1              0.000005   hi def link htmlHead                    PreProc
    1              0.000006   hi def link htmlTitle                   Title
    1              0.000003   hi def link htmlBoldItalicUnderline     htmlBoldUnderlineItalic
    1              0.000003   hi def link htmlUnderlineBold           htmlBoldUnderline
    1              0.000003   hi def link htmlUnderlineItalicBold     htmlBoldUnderlineItalic
    1              0.000003   hi def link htmlUnderlineBoldItalic     htmlBoldUnderlineItalic
    1              0.000003   hi def link htmlItalicUnderline         htmlUnderlineItalic
    1              0.000003   hi def link htmlItalicBold              htmlBoldItalic
    1              0.000003   hi def link htmlItalicBoldUnderline     htmlBoldUnderlineItalic
    1              0.000003   hi def link htmlItalicUnderlineBold     htmlBoldUnderlineItalic
    1              0.000005   hi def link htmlLink                    Underlined
    1              0.000006   hi def link htmlLeadingSpace            None
    1              0.000003   if !exists("html_my_rendering")
    1              0.000007     hi def htmlBold                term=bold cterm=bold gui=bold
    1              0.000018     hi def htmlBoldUnderline       term=bold,underline cterm=bold,underline gui=bold,underline
    1              0.000005     hi def htmlBoldItalic          term=bold,italic cterm=bold,italic gui=bold,italic
    1              0.000017     hi def htmlBoldUnderlineItalic term=bold,italic,underline cterm=bold,italic,underline gui=bold,italic,underline
    1              0.000004     hi def htmlUnderline           term=underline cterm=underline gui=underline
    1              0.000010     hi def htmlUnderlineItalic     term=italic,underline cterm=italic,underline gui=italic,underline
    1              0.000003     hi def htmlItalic              term=italic cterm=italic gui=italic
    1              0.000008     if v:version > 800 || v:version == 800 && has("patch1038")
    1              0.000004         hi def htmlStrike              term=strikethrough cterm=strikethrough gui=strikethrough
                                else
                                    hi def htmlStrike              term=underline cterm=underline gui=underline
    1              0.000001     endif
    1              0.000001   endif
    1              0.000001 endif
                            
    1              0.000006 hi def link htmlPreStmt            PreProc
    1              0.000006 hi def link htmlPreError           Error
    1              0.000005 hi def link htmlPreProc            PreProc
    1              0.000006 hi def link htmlPreAttr            String
    1              0.000005 hi def link htmlPreProcAttrName    PreProc
    1              0.000006 hi def link htmlPreProcAttrError   Error
    1              0.000006 hi def link htmlString             String
    1              0.000005 hi def link htmlStatement          Statement
    1              0.000005 hi def link htmlComment            Comment
    1              0.000003 hi def link htmlCommentNested      htmlError
    1              0.000003 hi def link htmlCommentError       htmlError
    1              0.000003 hi def link htmlTagError           htmlError
    1              0.000003 hi def link htmlEvent              javaScript
    1              0.000006 hi def link htmlError              Error
                            
    1              0.000005 hi def link javaScript             Special
    1              0.000003 hi def link javaScriptExpression   javaScript
    1              0.000005 hi def link htmlCssStyleComment    Comment
    1              0.000005 hi def link htmlCssDefinition      Special
                            
    1              0.000003 let b:current_syntax = "html"
                            
    1              0.000002 if main_syntax == 'html'
                              unlet main_syntax
    1              0.000001 endif
                            
    1              0.000009 let &cpo = s:cpo_save
    1              0.000002 unlet s:cpo_save
                            " vim: ts=8

SCRIPT  /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/syntax/javascript.vim
Sourced 1 time
Total time:   0.001163
 Self time:   0.001163

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	JavaScript
                            " Maintainer:	Claudio Fleiner <claudio@fleiner.com>
                            " Updaters:	Scott Shattuck (ss) <ss@technicalpursuit.com>
                            " URL:		http://www.fleiner.com/vim/syntax/javascript.vim
                            " Changes:	(ss) added keywords, reserved words, and other identifiers
                            "		(ss) repaired several quoting and grouping glitches
                            "		(ss) fixed regex parsing issue with multiple qualifiers [gi]
                            "		(ss) additional factoring of keywords, globals, and members
                            " Last Change:	2021 Mar 30
                            " 		2013 Jun 12: adjusted javaScriptRegexpString (Kevin Locke)
                            " 		2018 Apr 14: adjusted javaScriptRegexpString (LongJohnCoder)
                            
                            " tuning parameters:
                            " unlet javaScript_fold
                            
    1              0.000006 if !exists("main_syntax")
                              " quit when a syntax file was already loaded
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'javascript'
    1              0.000003 elseif exists("b:current_syntax") && b:current_syntax == "javascript"
                              finish
    1              0.000001 endif
                            
    1              0.000008 let s:cpo_save = &cpo
    1              0.000011 set cpo&vim
                            
                            
    1              0.000014 syn keyword javaScriptCommentTodo      TODO FIXME XXX TBD contained
    1              0.000013 syn match   javaScriptLineComment      "\/\/.*" contains=@Spell,javaScriptCommentTodo
    1              0.000012 syn match   javaScriptCommentSkip      "^[ \t]*\*\($\|[ \t]\+\)"
    1              0.000013 syn region  javaScriptComment	       start="/\*"  end="\*/" contains=@Spell,javaScriptCommentTodo
    1              0.000009 syn match   javaScriptSpecial	       "\\\d\d\d\|\\."
    1              0.000015 syn region  javaScriptStringD	       start=+"+  skip=+\\\\\|\\"+  end=+"\|$+	contains=javaScriptSpecial,@htmlPreproc
    1              0.000013 syn region  javaScriptStringS	       start=+'+  skip=+\\\\\|\\'+  end=+'\|$+	contains=javaScriptSpecial,@htmlPreproc
    1              0.000017 syn region  javaScriptStringT	       start=+`+  skip=+\\\\\|\\`+  end=+`+	contains=javaScriptSpecial,javaScriptEmbed,@htmlPreproc
                            
    1              0.000006 syn region  javaScriptEmbed	       start=+${+  end=+}+	contains=@javaScriptEmbededExpr
                            
    1              0.000009 syn match   javaScriptSpecialCharacter "'\\.'"
    1              0.000011 syn match   javaScriptNumber	       "-\=\<\d\+L\=\>\|0[xX][0-9a-fA-F]\+\>"
    1              0.000005 syn match   javaScriptNumber	       "-\=\<\d\+\%(_\d\+\)*\>"
    1              0.000030 syn region  javaScriptRegexpString     start=+[,(=+]\s*/[^/*]+ms=e-1,me=e-1 skip=+\\\\\|\\/+ end=+/[gimuys]\{0,2\}\s*$+ end=+/[gimuys]\{0,2\}\s*[+;.,)\]}]+me=e-1 end=+/[gimuys]\{0,2\}\s\+\/+me=e-1 contains=@htmlPreproc,javaScriptComment oneline
                            
    1              0.000008 syn keyword javaScriptConditional	if else switch
    1              0.000007 syn keyword javaScriptRepeat		while for do in
    1              0.000006 syn keyword javaScriptBranch		break continue
    1              0.000007 syn keyword javaScriptOperator		new delete instanceof typeof
    1              0.000009 syn keyword javaScriptType		Array Boolean Date Function Number Object String RegExp
    1              0.000006 syn keyword javaScriptStatement		return with await
    1              0.000006 syn keyword javaScriptBoolean		true false
    1              0.000006 syn keyword javaScriptNull		null undefined
    1              0.000007 syn keyword javaScriptIdentifier	arguments this var let
    1              0.000006 syn keyword javaScriptLabel		case default
    1              0.000007 syn keyword javaScriptException		try catch finally throw
    1              0.000007 syn keyword javaScriptMessage		alert confirm prompt status
    1              0.000008 syn keyword javaScriptGlobal		self window top parent
    1              0.000006 syn keyword javaScriptMember		document event location 
    1              0.000007 syn keyword javaScriptDeprecated	escape unescape
    1              0.000017 syn keyword javaScriptReserved		abstract boolean byte char class const debugger double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile async
                            
    1              0.000007 syn cluster  javaScriptEmbededExpr	contains=javaScriptBoolean,javaScriptNull,javaScriptIdentifier,javaScriptStringD,javaScriptStringS,javaScriptStringT
                            
    1              0.000003 if exists("javaScript_fold")
                                syn match	javaScriptFunction	"\<function\>"
                                syn region	javaScriptFunctionFold	start="\<function\>.*[^};]$" end="^\z1}.*$" transparent fold keepend
                            
                                syn sync match javaScriptSync	grouphere javaScriptFunctionFold "\<function\>"
                                syn sync match javaScriptSync	grouphere NONE "^}"
                            
                                setlocal foldmethod=syntax
                                setlocal foldtext=getline(v:foldstart)
    1              0.000001 else
    1              0.000007     syn keyword javaScriptFunction	function
    1              0.000010     syn match	javaScriptBraces	   "[{}\[\]]"
    1              0.000008     syn match	javaScriptParens	   "[()]"
    1              0.000001 endif
                            
    1              0.000002 if main_syntax == "javascript"
                              syn sync fromstart
                              syn sync maxlines=100
                            
                              syn sync ccomment javaScriptComment
    1              0.000001 endif
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
    1              0.000006 hi def link javaScriptComment		Comment
    1              0.000005 hi def link javaScriptLineComment		Comment
    1              0.000005 hi def link javaScriptCommentTodo		Todo
    1              0.000004 hi def link javaScriptSpecial		Special
    1              0.000005 hi def link javaScriptStringS		String
    1              0.000005 hi def link javaScriptStringD		String
    1              0.000004 hi def link javaScriptStringT		String
    1              0.000010 hi def link javaScriptCharacter		Character
    1              0.000002 hi def link javaScriptSpecialCharacter	javaScriptSpecial
    1              0.000007 hi def link javaScriptNumber		javaScriptValue
    1              0.000004 hi def link javaScriptConditional		Conditional
    1              0.000004 hi def link javaScriptRepeat		Repeat
    1              0.000004 hi def link javaScriptBranch		Conditional
    1              0.000005 hi def link javaScriptOperator		Operator
    1              0.000005 hi def link javaScriptType			Type
    1              0.000004 hi def link javaScriptStatement		Statement
    1              0.000004 hi def link javaScriptFunction		Function
    1              0.000004 hi def link javaScriptBraces		Function
    1              0.000008 hi def link javaScriptError		Error
    1              0.000005 hi def link javaScrParenError		javaScriptError
    1              0.000004 hi def link javaScriptNull			Keyword
    1              0.000004 hi def link javaScriptBoolean		Boolean
    1              0.000005 hi def link javaScriptRegexpString		String
                            
    1              0.000005 hi def link javaScriptIdentifier		Identifier
    1              0.000005 hi def link javaScriptLabel		Label
    1              0.000004 hi def link javaScriptException		Exception
    1              0.000004 hi def link javaScriptMessage		Keyword
    1              0.000004 hi def link javaScriptGlobal		Keyword
    1              0.000004 hi def link javaScriptMember		Keyword
    1              0.000004 hi def link javaScriptDeprecated		Exception 
    1              0.000004 hi def link javaScriptReserved		Keyword
    1              0.000009 hi def link javaScriptDebug		Debug
    1              0.000008 hi def link javaScriptConstant		Label
    1              0.000004 hi def link javaScriptEmbed		Special
                            
                            
                            
    1              0.000002 let b:current_syntax = "javascript"
    1              0.000002 if main_syntax == 'javascript'
                              unlet main_syntax
    1              0.000001 endif
    1              0.000007 let &cpo = s:cpo_save
    1              0.000002 unlet s:cpo_save
                            
                            " vim: ts=8

SCRIPT  /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/syntax/vb.vim
Sourced 1 time
Total time:   0.002458
 Self time:   0.002458

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	Visual Basic
                            " Maintainer:	Tim Chase <vb.vim@tim.thechases.com>
                            " Former Maintainer:	Robert M. Cortopassi <cortopar@mindspring.com>
                            "	(tried multiple times to contact, but email bounced)
                            " Last Change:
                            "   2005 May 25  Synched with work by Thomas Barthel
                            "   2004 May 30  Added a few keywords
                            
                            " This was thrown together after seeing numerous requests on the
                            " VIM and VIM-DEV mailing lists.  It is by no means complete.
                            " Send comments, suggestions and requests to the maintainer.
                            
                            " quit when a syntax file was already loaded
    1              0.000005 if exists("b:current_syntax")
                            	finish
    1              0.000001 endif
                            
                            " VB is case insensitive
    1              0.000001 syn case ignore
                            
    1              0.000013 syn keyword vbConditional If Then ElseIf Else Select Case
                            
    1              0.000008 syn keyword vbOperator AddressOf And ByRef ByVal Eqv Imp In
    1              0.000003 syn keyword vbOperator Is Like Mod Not Or To Xor
                            
    1              0.000005 syn match vbOperator "[()+.,\-/*=&]"
    1              0.000003 syn match vbOperator "[<>]=\="
    1              0.000003 syn match vbOperator "<>"
    1              0.000003 syn match vbOperator "\s\+_$"
                            
    1              0.000006 syn keyword vbBoolean  True False
    1              0.000006 syn keyword vbConst Null Nothing
                            
    1              0.000007 syn keyword vbRepeat Do For ForEach Loop Next
    1              0.000003 syn keyword vbRepeat Step To Until Wend While
                            
    1              0.000006 syn keyword vbEvents AccessKeyPress Activate ActiveRowChanged
    1              0.000003 syn keyword vbEvents AfterAddFile AfterChangeFileName AfterCloseFile
    1              0.000002 syn keyword vbEvents AfterColEdit AfterColUpdate AfterDelete
    1              0.000002 syn keyword vbEvents AfterInsert AfterLabelEdit AfterRemoveFile
    1              0.000002 syn keyword vbEvents AfterUpdate AfterWriteFile AmbientChanged
    1              0.000002 syn keyword vbEvents ApplyChanges Associate AsyncProgress
    1              0.000002 syn keyword vbEvents AsyncReadComplete AsyncReadProgress AxisActivated
    1              0.000002 syn keyword vbEvents AxisLabelActivated AxisLabelSelected
    1              0.000002 syn keyword vbEvents AxisLabelUpdated AxisSelected AxisTitleActivated
    1              0.000002 syn keyword vbEvents AxisTitleSelected AxisTitleUpdated AxisUpdated
    1              0.000002 syn keyword vbEvents BeforeClick BeforeColEdit BeforeColUpdate
    1              0.000002 syn keyword vbEvents BeforeConnect BeforeDelete BeforeInsert
    1              0.000002 syn keyword vbEvents BeforeLabelEdit BeforeLoadFile BeforeUpdate
    1              0.000002 syn keyword vbEvents BeginRequest BeginTrans ButtonClick
    1              0.000002 syn keyword vbEvents ButtonCompleted ButtonDropDown ButtonGotFocus
    1              0.000003 syn keyword vbEvents ButtonLostFocus CallbackKeyDown Change Changed
    1              0.000003 syn keyword vbEvents ChartActivated ChartSelected ChartUpdated Click
    1              0.000003 syn keyword vbEvents Close CloseQuery CloseUp ColEdit ColResize
    1              0.000002 syn keyword vbEvents Collapse ColumnClick CommitTrans Compare
    1              0.000002 syn keyword vbEvents ConfigChageCancelled ConfigChanged
    1              0.000003 syn keyword vbEvents ConfigChangedCancelled Connect ConnectionRequest
    1              0.000002 syn keyword vbEvents CurrentRecordChanged DECommandAdded
    1              0.000002 syn keyword vbEvents DECommandPropertyChanged DECommandRemoved
    1              0.000002 syn keyword vbEvents DEConnectionAdded DEConnectionPropertyChanged
    1              0.000002 syn keyword vbEvents DEConnectionRemoved DataArrival DataChanged
    1              0.000002 syn keyword vbEvents DataUpdated DateClicked DblClick Deactivate
    1              0.000002 syn keyword vbEvents DevModeChange DeviceArrival DeviceOtherEvent
    1              0.000002 syn keyword vbEvents DeviceQueryRemove DeviceQueryRemoveFailed
    1              0.000002 syn keyword vbEvents DeviceRemoveComplete DeviceRemovePending
    1              0.000002 syn keyword vbEvents Disconnect DisplayChanged Dissociate
    1              0.000002 syn keyword vbEvents DoGetNewFileName Done DonePainting DownClick
    1              0.000003 syn keyword vbEvents DragDrop DragOver DropDown EditProperty EditQuery
    1              0.000003 syn keyword vbEvents EndRequest EnterCell EnterFocus ExitFocus Expand
    1              0.000003 syn keyword vbEvents FontChanged FootnoteActivated FootnoteSelected
    1              0.000003 syn keyword vbEvents FootnoteUpdated Format FormatSize GotFocus
    1              0.000002 syn keyword vbEvents HeadClick HeightChanged Hide InfoMessage
    1              0.000002 syn keyword vbEvents IniProperties InitProperties Initialize
    1              0.000002 syn keyword vbEvents ItemActivated ItemAdded ItemCheck ItemClick
    1              0.000002 syn keyword vbEvents ItemReloaded ItemRemoved ItemRenamed
    1              0.000004 syn keyword vbEvents ItemSeletected KeyDown KeyPress KeyUp LeaveCell
    1              0.000002 syn keyword vbEvents LegendActivated LegendSelected LegendUpdated
    1              0.000002 syn keyword vbEvents LinkClose LinkError LinkExecute LinkNotify
    1              0.000002 syn keyword vbEvents LinkOpen Load LostFocus MouseDown MouseMove
    1              0.000002 syn keyword vbEvents MouseUp NodeCheck NodeClick OLECompleteDrag
    1              0.000003 syn keyword vbEvents OLEDragDrop OLEDragOver OLEGiveFeedback OLESetData
    1              0.000003 syn keyword vbEvents OLEStartDrag ObjectEvent ObjectMove OnAddNew
    1              0.000003 syn keyword vbEvents OnComm Paint PanelClick PanelDblClick PathChange
    1              0.000002 syn keyword vbEvents PatternChange PlotActivated PlotSelected
    1              0.000002 syn keyword vbEvents PlotUpdated PointActivated PointLabelActivated
    1              0.000002 syn keyword vbEvents PointLabelSelected PointLabelUpdated PointSelected
    1              0.000002 syn keyword vbEvents PointUpdated PowerQuerySuspend PowerResume
    1              0.000002 syn keyword vbEvents PowerStatusChanged PowerSuspend ProcessTag
    1              0.000002 syn keyword vbEvents ProcessingTimeout QueryChangeConfig QueryClose
    1              0.000002 syn keyword vbEvents QueryComplete QueryCompleted QueryTimeout
    1              0.000002 syn keyword vbEvents QueryUnload ReadProperties RepeatedControlLoaded
    1              0.000002 syn keyword vbEvents RepeatedControlUnloaded Reposition
    1              0.000002 syn keyword vbEvents RequestChangeFileName RequestWriteFile Resize
    1              0.000002 syn keyword vbEvents ResultsChanged RetainedProject RollbackTrans
    1              0.000002 syn keyword vbEvents RowColChange RowCurrencyChange RowResize
    1              0.000003 syn keyword vbEvents RowStatusChanged Scroll SelChange SelectionChanged
    1              0.000002 syn keyword vbEvents SendComplete SendProgress SeriesActivated
    1              0.000002 syn keyword vbEvents SeriesSelected SeriesUpdated SettingChanged Show
    1              0.000003 syn keyword vbEvents SplitChange Start StateChanged StatusUpdate
    1              0.000003 syn keyword vbEvents SysColorsChanged Terminate TimeChanged Timer
    1              0.000002 syn keyword vbEvents TitleActivated TitleSelected TitleUpdated
    1              0.000002 syn keyword vbEvents UnboundAddData UnboundDeleteRow
    1              0.000002 syn keyword vbEvents UnboundGetRelativeBookmark UnboundReadData
    1              0.000002 syn keyword vbEvents UnboundWriteData Unformat Unload UpClick Updated
    1              0.000002 syn keyword vbEvents UserEvent Validate ValidationError
    1              0.000002 syn keyword vbEvents VisibleRecordChanged WillAssociate WillChangeData
    1              0.000002 syn keyword vbEvents WillDissociate WillExecute WillUpdateRows
    1              0.000001 syn keyword vbEvents WriteProperties
                            
                            
    1              0.000008 syn keyword vbFunction Abs Array Asc AscB AscW Atn Avg BOF CBool CByte
    1              0.000004 syn keyword vbFunction CCur CDate CDbl CInt CLng CSng CStr CVDate CVErr
    1              0.000003 syn keyword vbFunction CVar CallByName Cdec Choose Chr ChrB ChrW Command
    1              0.000003 syn keyword vbFunction Cos Count CreateObject CurDir DDB Date DateAdd
    1              0.000003 syn keyword vbFunction DateDiff DatePart DateSerial DateValue Day Dir
    1              0.000003 syn keyword vbFunction DoEvents EOF Environ Error Exp FV FileAttr
    1              0.000003 syn keyword vbFunction FileDateTime FileLen FilterFix Fix Format
    1              0.000002 syn keyword vbFunction FormatCurrency FormatDateTime FormatNumber
    1              0.000003 syn keyword vbFunction FormatPercent FreeFile GetAllStrings GetAttr
    1              0.000003 syn keyword vbFunction GetAutoServerSettings GetObject GetSetting Hex
    1              0.000003 syn keyword vbFunction Hour IIf IMEStatus IPmt InStr Input InputB
    1              0.000003 syn keyword vbFunction InputBox InstrB Int IsArray IsDate IsEmpty IsError
    1              0.000004 syn keyword vbFunction IsMissing IsNull IsNumeric IsObject Join LBound
    1              0.000104 syn keyword vbFunction LCase LOF LTrim Left LeftB Len LenB LoadPicture
    1              0.000041 syn keyword vbFunction LoadResData LoadResPicture LoadResString Loc Log
    1              0.000044 syn keyword vbFunction MIRR Max Mid MidB Min Minute Month MonthName
    1              0.000061 syn keyword vbFunction MsgBox NPV NPer Now Oct PPmt PV Partition Pmt
    1              0.000054 syn keyword vbFunction QBColor RGB RTrim Rate Replace Right RightB Rnd
    1              0.000069 syn keyword vbFunction Round SLN SYD Second Seek Sgn Shell Sin Space Spc
    1              0.000047 syn keyword vbFunction Split Sqr StDev StDevP Str StrComp StrConv
    1              0.000029 syn keyword vbFunction StrReverse String Sum Switch Tab Tan Time
    1              0.000035 syn keyword vbFunction TimeSerial TimeValue Timer Trim TypeName UBound
    1              0.000043 syn keyword vbFunction UCase Val Var VarP VarType Weekday WeekdayName
    1              0.000008 syn keyword vbFunction Year
                            
    1              0.000034 syn keyword vbMethods AboutBox Accept Activate Add AddCustom AddFile
    1              0.000022 syn keyword vbMethods AddFromFile AddFromGuid AddFromString
    1              0.000030 syn keyword vbMethods AddFromTemplate AddItem AddNew AddToAddInToolbar
    1              0.000023 syn keyword vbMethods AddToolboxProgID Append AppendAppendChunk
    1              0.000036 syn keyword vbMethods AppendChunk Arrange Assert AsyncRead BatchUpdate
    1              0.000034 syn keyword vbMethods BeginQueryEdit BeginTrans Bind BuildPath
    1              0.000026 syn keyword vbMethods CanPropertyChange Cancel CancelAsyncRead
    1              0.000030 syn keyword vbMethods CancelBatch CancelUpdate CaptureImage CellText
    1              0.000031 syn keyword vbMethods CellValue Circle Clear ClearFields ClearSel
    1              0.000031 syn keyword vbMethods ClearSelCols ClearStructure Clone Close Cls
    1              0.000024 syn keyword vbMethods ColContaining CollapseAll ColumnSize CommitTrans
    1              0.000031 syn keyword vbMethods CompactDatabase Compose Connect Copy CopyFile
    1              0.000023 syn keyword vbMethods CopyFolder CopyQueryDef Count CreateDatabase
    1              0.000025 syn keyword vbMethods CreateDragImage CreateEmbed CreateField
    1              0.000032 syn keyword vbMethods CreateFolder CreateGroup CreateIndex CreateLink
    1              0.000024 syn keyword vbMethods CreatePreparedStatement CreatePropery CreateQuery
    1              0.000024 syn keyword vbMethods CreateQueryDef CreateRelation CreateTableDef
    1              0.000023 syn keyword vbMethods CreateTextFile CreateToolWindow CreateUser
    1              0.000024 syn keyword vbMethods CreateWorkspace Customize Cut Delete
    1              0.000025 syn keyword vbMethods DeleteColumnLabels DeleteColumns DeleteFile
    1              0.000017 syn keyword vbMethods DeleteFolder DeleteLines DeleteRowLabels
    1              0.000003 syn keyword vbMethods DeleteRows DeselectAll DesignerWindow DoVerb Drag
    1              0.000003 syn keyword vbMethods Draw DriveExists Edit EditCopy EditPaste EndDoc
    1              0.000003 syn keyword vbMethods EnsureVisible EstablishConnection Execute Exists
    1              0.000003 syn keyword vbMethods Expand Export ExportReport ExtractIcon Fetch
    1              0.000003 syn keyword vbMethods FetchVerbs FileExists Files FillCache Find
    1              0.000003 syn keyword vbMethods FindFirst FindItem FindLast FindNext FindPrevious
    1              0.000002 syn keyword vbMethods FolderExists Forward GetAbsolutePathName
    1              0.000002 syn keyword vbMethods GetBaseName GetBookmark GetChunk GetClipString
    1              0.000003 syn keyword vbMethods GetData GetDrive GetDriveName GetFile GetFileName
    1              0.000002 syn keyword vbMethods GetFirstVisible GetFolder GetFormat GetHeader
    1              0.000002 syn keyword vbMethods GetLineFromChar GetNumTicks GetParentFolderName
    1              0.000002 syn keyword vbMethods GetRows GetSelectedPart GetSelection
    1              0.000002 syn keyword vbMethods GetSpecialFolder GetTempName GetText
    1              0.000003 syn keyword vbMethods GetVisibleCount GoBack GoForward Hide HitTest
    1              0.000002 syn keyword vbMethods HoldFields Idle Import InitializeLabels Insert
    1              0.000002 syn keyword vbMethods InsertColumnLabels InsertColumns InsertFile
    1              0.000002 syn keyword vbMethods InsertLines InsertObjDlg InsertRowLabels
    1              0.000003 syn keyword vbMethods InsertRows Item Keys KillDoc Layout Line Lines
    1              0.000002 syn keyword vbMethods LinkExecute LinkPoke LinkRequest LinkSend Listen
    1              0.000003 syn keyword vbMethods LoadFile LoadResData LoadResPicture LoadResString
    1              0.000002 syn keyword vbMethods LogEvent MakeCompileFile MakeCompiledFile
    1              0.000002 syn keyword vbMethods MakeReplica MoreResults Move MoveData MoveFile
    1              0.000002 syn keyword vbMethods MoveFirst MoveFolder MoveLast MoveNext
    1              0.000003 syn keyword vbMethods MovePrevious NavigateTo NewPage NewPassword
    1              0.000003 syn keyword vbMethods NextRecordset OLEDrag OnAddinsUpdate OnConnection
    1              0.000002 syn keyword vbMethods OnDisconnection OnStartupComplete Open
    1              0.000002 syn keyword vbMethods OpenAsTextStream OpenConnection OpenDatabase
    1              0.000003 syn keyword vbMethods OpenQueryDef OpenRecordset OpenResultset OpenURL
    1              0.000002 syn keyword vbMethods Overlay PSet PaintPicture PastSpecialDlg Paste
    1              0.000002 syn keyword vbMethods PeekData Play Point PopulatePartial PopupMenu
    1              0.000002 syn keyword vbMethods Print PrintForm PrintReport PropertyChanged Quit
    1              0.000002 syn keyword vbMethods Raise RandomDataFill RandomFillColumns
    1              0.000002 syn keyword vbMethods RandomFillRows ReFill Read ReadAll ReadFromFile
    1              0.000002 syn keyword vbMethods ReadLine ReadProperty Rebind Refresh RefreshLink
    1              0.000002 syn keyword vbMethods RegisterDatabase ReleaseInstance Reload Remove
    1              0.000003 syn keyword vbMethods RemoveAddInFromToolbar RemoveAll RemoveItem Render
    1              0.000003 syn keyword vbMethods RepairDatabase ReplaceLine Reply ReplyAll Requery
    1              0.000002 syn keyword vbMethods ResetCustom ResetCustomLabel ResolveName
    1              0.000002 syn keyword vbMethods RestoreToolbar Resync Rollback RollbackTrans
    1              0.000002 syn keyword vbMethods RowBookmark RowContaining RowTop Save SaveAs
    1              0.000002 syn keyword vbMethods SaveFile SaveToFile SaveToOle1File SaveToolbar
    1              0.000003 syn keyword vbMethods Scale ScaleX ScaleY Scroll SelPrint SelectAll
    1              0.000003 syn keyword vbMethods SelectPart Send SendData Set SetAutoServerSettings
    1              0.000003 syn keyword vbMethods SetData SetFocus SetOption SetSelection SetSize
    1              0.000003 syn keyword vbMethods SetText SetViewport Show ShowColor ShowFont
    1              0.000002 syn keyword vbMethods ShowHelp ShowOpen ShowPrinter ShowSave
    1              0.000003 syn keyword vbMethods ShowWhatsThis SignOff SignOn Size Skip SkipLine
    1              0.000003 syn keyword vbMethods Span Split SplitContaining StartLabelEdit
    1              0.000003 syn keyword vbMethods StartLogging Stop Synchronize Tag TextHeight
    1              0.000002 syn keyword vbMethods TextWidth ToDefaults Trace TwipsToChartPart
    1              0.000002 syn keyword vbMethods TypeByChartType URLFor Update UpdateControls
    1              0.000003 syn keyword vbMethods UpdateRecord UpdateRow Upto ValidateControls Value
    1              0.000002 syn keyword vbMethods WhatsThisMode Write WriteBlankLines WriteLine
    1              0.000002 syn keyword vbMethods WriteProperty WriteTemplate ZOrder
    1              0.000002 syn keyword vbMethods rdoCreateEnvironment rdoRegisterDataSource
                            
    1              0.000008 syn keyword vbStatement Alias AppActivate As Base Beep Begin Call ChDir
    1              0.000003 syn keyword vbStatement ChDrive Close Const Date Declare DefBool DefByte
    1              0.000003 syn keyword vbStatement DefCur DefDate DefDbl DefDec DefInt DefLng DefObj
    1              0.000003 syn keyword vbStatement DefSng DefStr DefVar Deftype DeleteSetting Dim Do
    1              0.000003 syn keyword vbStatement Each ElseIf End Enum Erase Error Event Exit
    1              0.000003 syn keyword vbStatement Explicit FileCopy For ForEach Function Get GoSub
    1              0.000003 syn keyword vbStatement GoTo Gosub Implements Kill LSet Let Lib LineInput
    1              0.000003 syn keyword vbStatement Load Lock Loop Mid MkDir Name Next On OnError Open
    1              0.000003 syn keyword vbStatement Option Preserve Private Property Public Put RSet
    1              0.000003 syn keyword vbStatement RaiseEvent Randomize ReDim Redim Reset Resume
    1              0.000003 syn keyword vbStatement Return RmDir SavePicture SaveSetting Seek SendKeys
    1              0.000003 syn keyword vbStatement Sendkeys Set SetAttr Static Step Stop Sub Time
    1              0.000003 syn keyword vbStatement Type Unload Unlock Until Wend While Width With
    1              0.000001 syn keyword vbStatement Write
                            
    1              0.000008 syn keyword vbKeyword As Binary ByRef ByVal Date Empty Error Friend Get
    1              0.000003 syn keyword vbKeyword Input Is Len Lock Me Mid New Nothing Null On
    1              0.000003 syn keyword vbKeyword Option Optional ParamArray Print Private Property
    1              0.000002 syn keyword vbKeyword Public PublicNotCreateable OnNewProcessSingleUse
    1              0.000003 syn keyword vbKeyword InSameProcessMultiUse GlobalMultiUse Resume Seek
    1              0.000003 syn keyword vbKeyword Set Static Step String Time WithEvents
                            
    1              0.000006 syn keyword vbTodo contained	TODO
                            
                            "Datatypes
    1              0.000007 syn keyword vbTypes Boolean Byte Currency Date Decimal Double Empty
    1              0.000003 syn keyword vbTypes Integer Long Object Single String Variant
                            
                            "VB defined values
    1              0.000007 syn keyword vbDefine dbBigInt dbBinary dbBoolean dbByte dbChar
    1              0.000003 syn keyword vbDefine dbCurrency dbDate dbDecimal dbDouble dbFloat
    1              0.000003 syn keyword vbDefine dbGUID dbInteger dbLong dbLongBinary dbMemo
    1              0.000003 syn keyword vbDefine dbNumeric dbSingle dbText dbTime dbTimeStamp
    1              0.000002 syn keyword vbDefine dbVarBinary
                            
                            "VB defined values
    1              0.000002 syn keyword vbDefine vb3DDKShadow vb3DFace vb3DHighlight vb3DLight
    1              0.000002 syn keyword vbDefine vb3DShadow vbAbort vbAbortRetryIgnore
    1              0.000002 syn keyword vbDefine vbActiveBorder vbActiveTitleBar vbAlias
    1              0.000002 syn keyword vbDefine vbApplicationModal vbApplicationWorkspace
    1              0.000002 syn keyword vbDefine vbAppTaskManager vbAppWindows vbArchive vbArray
    1              0.000002 syn keyword vbDefine vbBack vbBinaryCompare vbBlack vbBlue vbBoolean
    1              0.000002 syn keyword vbDefine vbButtonFace vbButtonShadow vbButtonText vbByte
    1              0.000003 syn keyword vbDefine vbCalGreg vbCalHijri vbCancel vbCr vbCritical
    1              0.000002 syn keyword vbDefine vbCrLf vbCurrency vbCyan vbDatabaseCompare
    1              0.000002 syn keyword vbDefine vbDataObject vbDate vbDecimal vbDefaultButton1
    1              0.000002 syn keyword vbDefine vbDefaultButton2 vbDefaultButton3 vbDefaultButton4
    1              0.000002 syn keyword vbDefine vbDesktop vbDirectory vbDouble vbEmpty vbError
    1              0.000002 syn keyword vbDefine vbExclamation vbFirstFourDays vbFirstFullWeek
    1              0.000002 syn keyword vbDefine vbFirstJan1 vbFormCode vbFormControlMenu
    1              0.000002 syn keyword vbDefine vbFormFeed vbFormMDIForm vbFriday vbFromUnicode
    1              0.000003 syn keyword vbDefine vbGrayText vbGreen vbHidden vbHide vbHighlight
    1              0.000002 syn keyword vbDefine vbHighlightText vbHiragana vbIgnore vbIMEAlphaDbl
    1              0.000002 syn keyword vbDefine vbIMEAlphaSng vbIMEDisable vbIMEHiragana
    1              0.000002 syn keyword vbDefine vbIMEKatakanaDbl vbIMEKatakanaSng vbIMEModeAlpha
    1              0.000002 syn keyword vbDefine vbIMEModeAlphaFull vbIMEModeDisable
    1              0.000002 syn keyword vbDefine vbIMEModeHangul vbIMEModeHangulFull
    1              0.000002 syn keyword vbDefine vbIMEModeHiragana vbIMEModeKatakana
    1              0.000002 syn keyword vbDefine vbIMEModeKatakanaHalf vbIMEModeNoControl
    1              0.000002 syn keyword vbDefine vbIMEModeOff vbIMEModeOn vbIMENoOp vbIMEOff
    1              0.000002 syn keyword vbDefine vbIMEOn vbInactiveBorder vbInactiveCaptionText
    1              0.000002 syn keyword vbDefine vbInactiveTitleBar vbInfoBackground vbInformation
    1              0.000002 syn keyword vbDefine vbInfoText vbInteger vbKatakana vbKey0 vbKey1
    1              0.000002 syn keyword vbDefine vbKey2 vbKey3 vbKey4 vbKey5 vbKey6 vbKey7 vbKey8
    1              0.000003 syn keyword vbDefine vbKey9 vbKeyA vbKeyAdd vbKeyB vbKeyBack vbKeyC
    1              0.000002 syn keyword vbDefine vbKeyCancel vbKeyCapital vbKeyClear vbKeyControl
    1              0.000002 syn keyword vbDefine vbKeyD vbKeyDecimal vbKeyDelete vbKeyDivide
    1              0.000002 syn keyword vbDefine vbKeyDown vbKeyE vbKeyEnd vbKeyEscape vbKeyExecute
    1              0.000003 syn keyword vbDefine vbKeyF vbKeyF1 vbKeyF10 vbKeyF11 vbKeyF12 vbKeyF13
    1              0.000003 syn keyword vbDefine vbKeyF14 vbKeyF15 vbKeyF16 vbKeyF2 vbKeyF3 vbKeyF4
    1              0.000002 syn keyword vbDefine vbKeyF5 vbKeyF6 vbKeyF7 vbKeyF8 vbKeyF9 vbKeyG
    1              0.000003 syn keyword vbDefine vbKeyH vbKeyHelp vbKeyHome vbKeyI vbKeyInsert
    1              0.000003 syn keyword vbDefine vbKeyJ vbKeyK vbKeyL vbKeyLButton vbKeyLeft vbKeyM
    1              0.000002 syn keyword vbDefine vbKeyMButton vbKeyMenu vbKeyMultiply vbKeyN
    1              0.000002 syn keyword vbDefine vbKeyNumlock vbKeyNumpad0 vbKeyNumpad1
    1              0.000002 syn keyword vbDefine vbKeyNumpad2 vbKeyNumpad3 vbKeyNumpad4
    1              0.000002 syn keyword vbDefine vbKeyNumpad5 vbKeyNumpad6 vbKeyNumpad7
    1              0.000002 syn keyword vbDefine vbKeyNumpad8 vbKeyNumpad9 vbKeyO vbKeyP
    1              0.000002 syn keyword vbDefine vbKeyPageDown vbKeyPageUp vbKeyPause vbKeyPrint
    1              0.000002 syn keyword vbDefine vbKeyQ vbKeyR vbKeyRButton vbKeyReturn vbKeyRight
    1              0.000002 syn keyword vbDefine vbKeyS vbKeySelect vbKeySeparator vbKeyShift
    1              0.000002 syn keyword vbDefine vbKeySnapshot vbKeySpace vbKeySubtract vbKeyT
    1              0.000002 syn keyword vbDefine vbKeyTab vbKeyU vbKeyUp vbKeyV vbKeyW vbKeyX
    1              0.000003 syn keyword vbDefine vbKeyY vbKeyZ vbLf vbLong vbLowerCase vbMagenta
    1              0.000002 syn keyword vbDefine vbMaximizedFocus vbMenuBar vbMenuText
    1              0.000002 syn keyword vbDefine vbMinimizedFocus vbMinimizedNoFocus vbMonday
    1              0.000002 syn keyword vbDefine vbMsgBox vbMsgBoxHelpButton vbMsgBoxRight
    1              0.000002 syn keyword vbDefine vbMsgBoxRtlReading vbMsgBoxSetForeground
    1              0.000003 syn keyword vbDefine vbMsgBoxText vbNarrow vbNewLine vbNo vbNormal
    1              0.000002 syn keyword vbDefine vbNormalFocus vbNormalNoFocus vbNull vbNullChar
    1              0.000002 syn keyword vbDefine vbNullString vbObject vbObjectError vbOK
    1              0.000002 syn keyword vbDefine vbOKCancel vbOKOnly vbProperCase vbQuestion
    1              0.000003 syn keyword vbDefine vbReadOnly vbRed vbRetry vbRetryCancel vbSaturday
    1              0.000002 syn keyword vbDefine vbScrollBars vbSingle vbString vbSunday vbSystem
    1              0.000002 syn keyword vbDefine vbSystemModal vbTab vbTextCompare vbThursday
    1              0.000002 syn keyword vbDefine vbTitleBarText vbTuesday vbUnicode vbUpperCase
    1              0.000002 syn keyword vbDefine vbUseSystem vbUseSystemDayOfWeek vbVariant
    1              0.000002 syn keyword vbDefine vbVerticalTab vbVolume vbWednesday vbWhite vbWide
    1              0.000002 syn keyword vbDefine vbWindowBackground vbWindowFrame vbWindowText
    1              0.000002 syn keyword vbDefine vbYellow vbYes vbYesNo vbYesNoCancel
                            
                            "Numbers
                            "integer number, or floating point number without a dot.
    1              0.000010 syn match vbNumber "\<\d\+\>"
                            "floating point number, with dot
    1              0.000004 syn match vbNumber "\<\d\+\.\d*\>"
                            "floating point number, starting with a dot
    1              0.000003 syn match vbNumber "\.\d\+\>"
                            "syn match  vbNumber		"{[[:xdigit:]-]\+}\|&[hH][[:xdigit:]]\+&"
                            "syn match  vbNumber		":[[:xdigit:]]\+"
                            "syn match  vbNumber		"[-+]\=\<\d\+\>"
    1              0.000011 syn match  vbFloat		"[-+]\=\<\d\+[eE][\-+]\=\d\+"
    1              0.000005 syn match  vbFloat		"[-+]\=\<\d\+\.\d*\([eE][\-+]\=\d\+\)\="
    1              0.000004 syn match  vbFloat		"[-+]\=\<\.\d\+\([eE][\-+]\=\d\+\)\="
                            
                            " String and Character contstants
    1              0.000012 syn region  vbString		start=+"+  end=+"\|$+
    1              0.000013 syn region  vbComment		start="\(^\|\s\)REM\s" end="$" contains=vbTodo
    1              0.000006 syn region  vbComment		start="\(^\|\s\)\'"   end="$" contains=vbTodo
    1              0.000009 syn match   vbLineNumber	"^\d\+\(\s\|$\)"
    1              0.000009 syn match   vbTypeSpecifier  "[a-zA-Z0-9][\$%&!#]"ms=s+1
    1              0.000003 syn match   vbTypeSpecifier  "#[a-zA-Z0-9]"me=e-1
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
    1              0.000006 hi def link vbBoolean		Boolean
    1              0.000005 hi def link vbLineNumber		Comment
    1              0.000004 hi def link vbComment		Comment
    1              0.000004 hi def link vbConditional	Conditional
    1              0.000004 hi def link vbConst			Constant
    1              0.000004 hi def link vbDefine			Constant
    1              0.000009 hi def link vbError			Error
    1              0.000005 hi def link vbFunction		Identifier
    1              0.000009 hi def link vbIdentifier		Identifier
    1              0.000005 hi def link vbNumber			Number
    1              0.000004 hi def link vbFloat			Float
    1              0.000004 hi def link vbMethods		PreProc
    1              0.000005 hi def link vbOperator		Operator
    1              0.000004 hi def link vbRepeat			Repeat
    1              0.000004 hi def link vbString			String
    1              0.000004 hi def link vbStatement		Statement
    1              0.000004 hi def link vbKeyword		Statement
    1              0.000004 hi def link vbEvents			Special
    1              0.000004 hi def link vbTodo			Todo
    1              0.000005 hi def link vbTypes			Type
    1              0.000005 hi def link vbTypeSpecifier	Type
                            
                            
    1              0.000003 let b:current_syntax = "vb"
                            
                            " vim: ts=8

SCRIPT  /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/syntax/css.vim
Sourced 1 time
Total time:   0.007955
 Self time:   0.007955

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Cascading Style Sheets
                            " Previous Contributor List:
                            "               Jules Wang      <w.jq0722@gmail.com>
                            "               Claudio Fleiner <claudio@fleiner.com> (Maintainer)
                            "               Yeti            (Add full CSS2, HTML4 support)
                            "               Nikolai Weibull (Add CSS2 support)
                            " URL:          https://github.com/jsit/css.vim
                            " Maintainer:   Jay Sitter <jay@jaysitter.com>
                            " Last Change:  2019 Jul. 29
                            
                            " quit when a syntax file was already loaded
    1              0.000006 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'css'
    1              0.000003 elseif exists("b:current_syntax") && b:current_syntax == "css"
                              finish
    1              0.000001 endif
                            
    1              0.000008 let s:cpo_save = &cpo
    1              0.000008 set cpo&vim
                            
    1              0.000002 syn case ignore
                            
                            " HTML4 tags
    1              0.000018 syn keyword cssTagName abbr address area a b base
    1              0.000003 syn keyword cssTagName bdo blockquote body br button
    1              0.000004 syn keyword cssTagName caption cite code col colgroup dd del
    1              0.000003 syn keyword cssTagName dfn div dl dt em fieldset form
    1              0.000003 syn keyword cssTagName h1 h2 h3 h4 h5 h6 head hr html img i
    1              0.000003 syn keyword cssTagName iframe input ins isindex kbd label legend li
    1              0.000003 syn keyword cssTagName link map menu meta noscript ol optgroup
    1              0.000003 syn keyword cssTagName option p param pre q s samp script small
    1              0.000003 syn keyword cssTagName span strong sub sup tbody td
    1              0.000003 syn keyword cssTagName textarea tfoot th thead title tr ul u var
    1              0.000002 syn keyword cssTagName object svg
    1              0.000007 syn match   cssTagName /\<select\>\|\<style\>\|\<table\>/
                            
                            " 34 HTML5 tags
    1              0.000003 syn keyword cssTagName article aside audio bdi canvas command data
    1              0.000003 syn keyword cssTagName datalist details dialog embed figcaption figure footer
    1              0.000003 syn keyword cssTagName header hgroup keygen main mark menuitem meter nav
    1              0.000003 syn keyword cssTagName output progress rt rp ruby section
    1              0.000003 syn keyword cssTagName source summary time track video wbr
                            
                            " Tags not supported in HTML5
                            " acronym applet basefont big center dir
                            " font frame frameset noframes strike tt
                            
    1              0.000003 syn match cssTagName "\*"
                            
                            " selectors
    1              0.000009 syn match cssSelectorOp "[,>+~]"
    1              0.000009 syn match cssSelectorOp2 "[~|^$*]\?=" contained
    1              0.000028 syn region cssAttributeSelector matchgroup=cssSelectorOp start="\[" end="]" contains=cssUnicodeEscape,cssSelectorOp2,cssStringQ,cssStringQQ
                            
                            " .class and #id
    1              0.000017 syn match cssClassName "\.-\=[A-Za-z_][A-Za-z0-9_-]*" contains=cssClassNameDot
    1              0.000002 syn match cssClassNameDot contained '\.'
                            
    1              0.000001 try
    1              0.000011 syn match cssIdentifier "#[A-Za-zÀ-ÿ_@][A-Za-zÀ-ÿ0-9_@-]*"
                            catch /^.*/
                            syn match cssIdentifier "#[A-Za-z_@][A-Za-z0-9_@-]*"
    1              0.000001 endtry
                            
                            " digits
    1              0.000014 syn match cssValueInteger contained "[-+]\=\d\+" contains=cssUnitDecorators
    1              0.000010 syn match cssValueNumber contained "[-+]\=\d\+\(\.\d*\)\=" contains=cssUnitDecorators
    1              0.000016 syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=\(mm\|cm\|in\|pt\|pc\|em\|ex\|px\|rem\|dpi\|dppx\|dpcm\|fr\|vw\|vh\|vmin\|vmax\|ch\)\>" contains=cssUnitDecorators
    1              0.000009 syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=%" contains=cssUnitDecorators
    1              0.000010 syn match cssValueAngle contained "[-+]\=\d\+\(\.\d*\)\=\(deg\|grad\|rad\)\>" contains=cssUnitDecorators
    1              0.000009 syn match cssValueTime contained "+\=\d\+\(\.\d*\)\=\(ms\|s\)\>" contains=cssUnitDecorators
    1              0.000009 syn match cssValueFrequency contained "+\=\d\+\(\.\d*\)\=\(Hz\|kHz\)\>" contains=cssUnitDecorators
                            
                            " The 16 basic color names
    1              0.000011 syn keyword cssColor contained aqua black blue fuchsia gray green lime maroon navy olive purple red silver teal yellow
                            
                            " 130 more color names
    1              0.000004 syn keyword cssColor contained aliceblue antiquewhite aquamarine azure
    1              0.000003 syn keyword cssColor contained beige bisque blanchedalmond blueviolet brown burlywood
    1              0.000004 syn keyword cssColor contained cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan
    1              0.000006 syn match cssColor contained /\<dark\(blue\|cyan\|goldenrod\|gray\|green\|grey\|khaki\)\>/
    1              0.000008 syn match cssColor contained /\<dark\(magenta\|olivegreen\|orange\|orchid\|red\|salmon\|seagreen\)\>/
    1              0.000005 syn match cssColor contained /\<darkslate\(blue\|gray\|grey\)\>/
    1              0.000005 syn match cssColor contained /\<dark\(turquoise\|violet\)\>/
    1              0.000004 syn keyword cssColor contained deeppink deepskyblue dimgray dimgrey dodgerblue firebrick
    1              0.000003 syn keyword cssColor contained floralwhite forestgreen gainsboro ghostwhite gold
    1              0.000003 syn keyword cssColor contained goldenrod greenyellow grey honeydew hotpink
    1              0.000003 syn keyword cssColor contained indianred indigo ivory khaki lavender lavenderblush lawngreen
    1              0.000002 syn keyword cssColor contained lemonchiffon limegreen linen magenta
    1              0.000007 syn match cssColor contained /\<light\(blue\|coral\|cyan\|goldenrodyellow\|gray\|green\)\>/
    1              0.000006 syn match cssColor contained /\<light\(grey\|pink\|salmon\|seagreen\|skyblue\|yellow\)\>/
    1              0.000006 syn match cssColor contained /\<light\(slategray\|slategrey\|steelblue\)\>/
    1              0.000006 syn match cssColor contained /\<medium\(aquamarine\|blue\|orchid\|purple\|seagreen\)\>/
    1              0.000008 syn match cssColor contained /\<medium\(slateblue\|springgreen\|turquoise\|violetred\)\>/
    1              0.000003 syn keyword cssColor contained midnightblue mintcream mistyrose moccasin navajowhite
    1              0.000003 syn keyword cssColor contained oldlace olivedrab orange orangered orchid
    1              0.000006 syn match cssColor contained /\<pale\(goldenrod\|green\|turquoise\|violetred\)\>/
    1              0.000003 syn keyword cssColor contained papayawhip peachpuff peru pink plum powderblue
    1              0.000003 syn keyword cssColor contained rosybrown royalblue rebeccapurple saddlebrown salmon
    1              0.000003 syn keyword cssColor contained sandybrown seagreen seashell sienna skyblue slateblue
    1              0.000003 syn keyword cssColor contained slategray slategrey snow springgreen steelblue tan
    1              0.000002 syn keyword cssColor contained thistle tomato turquoise violet wheat
    1              0.000002 syn keyword cssColor contained whitesmoke yellowgreen
                            
                            " FIXME: These are actually case-insensitive too, but (a) specs recommend using
                            " mixed-case (b) it's hard to highlight the word `Background' correctly in
                            " all situations
    1              0.000001 syn case match
    1              0.000009 syn keyword cssColor contained ActiveBorder ActiveCaption AppWorkspace ButtonFace ButtonHighlight ButtonShadow ButtonText CaptionText GrayText Highlight HighlightText InactiveBorder InactiveCaption InactiveCaptionText InfoBackground InfoText Menu MenuText Scrollbar ThreeDDarkShadow ThreeDFace ThreeDHighlight ThreeDLightShadow ThreeDShadow Window WindowFrame WindowText Background
    1              0.000001 syn case ignore
                            
    1              0.000008 syn match cssImportant contained "!\s*important\>"
    1              0.000009 syn match cssCustomProp contained "--[a-zA-Z0-9-_]*"
                            
    1              0.000003 syn match cssColor contained "\<transparent\>"
    1              0.000003 syn match cssColor contained "\<currentColor\>"
    1              0.000002 syn match cssColor contained "\<white\>"
    1              0.000005 syn match cssColor contained "#\x\{3,4\}\>" contains=cssUnitDecorators
    1              0.000004 syn match cssColor contained "#\x\{6\}\>" contains=cssUnitDecorators
    1              0.000003 syn match cssColor contained "#\x\{8\}\>" contains=cssUnitDecorators
                            
    1              0.000022 syn region cssURL contained matchgroup=cssFunctionName start="\<\(uri\|url\|local\|format\)\s*(" end=")" contains=cssStringQ,cssStringQQ oneline
    1              0.000313 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(var\|calc\)\s*(" end=")" contains=cssCustomProp,cssValue.*,cssFunction,cssColor,cssStringQ,cssStringQQ oneline
    1              0.000018 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgb\|clip\|attr\|counter\|rect\|cubic-bezier\|steps\)\s*(" end=")" oneline  contains=cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma
    1              0.000012 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgba\|hsl\|hsla\|color-stop\|from\|to\)\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma,cssFunction
    1              0.000016 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(linear-\|radial-\)\=\gradient\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunction,cssGradientAttr,cssFunctionComma
    1              0.000015 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(matrix\(3d\)\=\|scale\(3d\|X\|Y\|Z\)\=\|translate\(3d\|X\|Y\|Z\)\=\|skew\(X\|Y\)\=\|rotate\(3d\|X\|Y\|Z\)\=\|perspective\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
    1              0.000013 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(blur\|brightness\|contrast\|drop-shadow\|grayscale\|hue-rotate\|invert\|opacity\|saturate\|sepia\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
    1              0.000005 syn keyword cssGradientAttr contained top bottom left right cover center middle ellipse at
    1              0.000002 syn match cssFunctionComma contained ","
                            
                            " Common Prop and Attr
    1              0.000008 syn keyword cssCommonAttr contained auto none inherit all default normal
    1              0.000003 syn keyword cssCommonAttr contained top bottom center stretch hidden visible
    1              0.000004 syn match cssCommonAttr contained "\<\(max-\|min-\|fit-\)content\>"
                            "------------------------------------------------
                            " CSS Animations
                            " http://www.w3.org/TR/css3-animations/
    1              0.000016 syn match cssAnimationProp contained "\<animation\(-\(delay\|direction\|duration\|fill-mode\|name\|play-state\|timing-function\|iteration-count\)\)\=\>"
                            
                            " animation-direction attributes
    1              0.000007 syn keyword cssAnimationAttr contained alternate reverse
    1              0.000003 syn match cssAnimationAttr contained "\<alternate-reverse\>"
                            
                            " animation-fill-mode attributes
    1              0.000002 syn keyword cssAnimationAttr contained forwards backwards both
                            
                            " animation-play-state attributes
    1              0.000001 syn keyword cssAnimationAttr contained running paused
                            
                            " animation-iteration-count attributes
    1              0.000001 syn keyword cssAnimationAttr contained infinite
                            "------------------------------------------------
                            "  CSS Backgrounds and Borders Module Level 3
                            "  http://www.w3.org/TR/css3-background/
    1              0.000014 syn match cssBackgroundProp contained "\<background\(-\(attachment\|clip\|color\|image\|origin\|position\|repeat\|size\)\)\=\>"
                            " background-attachment attributes
    1              0.000009 syn keyword cssBackgroundAttr contained scroll fixed local
                            
                            " background-position attributes
    1              0.000002 syn keyword cssBackgroundAttr contained left center right top bottom
                            
                            " background-repeat attributes
    1              0.000004 syn match cssBackgroundAttr contained "\<no-repeat\>"
    1              0.000005 syn match cssBackgroundAttr contained "\<repeat\(-[xy]\)\=\>"
                            
                            " background-size attributes
    1              0.000002 syn keyword cssBackgroundAttr contained cover contain
                            
    1              0.000013 syn match cssBorderProp contained "\<border\(-\(top\|right\|bottom\|left\)\)\=\(-\(width\|color\|style\)\)\=\>"
    1              0.000005 syn match cssBorderProp contained "\<border\(-\(top\|bottom\)-\(left\|right\)\)\=-radius\>"
    1              0.000006 syn match cssBorderProp contained "\<border-image\(-\(outset\|repeat\|slice\|source\|width\)\)\=\>"
    1              0.000004 syn match cssBorderProp contained "\<box-decoration-break\>"
    1              0.000003 syn match cssBorderProp contained "\<box-shadow\>"
                            
                            " border-image attributes
    1              0.000007 syn keyword cssBorderAttr contained stretch round fill
                            
                            " border-style attributes
    1              0.000003 syn keyword cssBorderAttr contained dotted dashed solid double groove ridge inset outset
                            
                            " border-width attributes
    1              0.000002 syn keyword cssBorderAttr contained thin thick medium
                            
                            " box-decoration-break attributes
    1              0.000001 syn keyword cssBorderAttr contained clone slice
                            "------------------------------------------------
                            
    1              0.000012 syn match cssBoxProp contained "\<padding\(-\(top\|right\|bottom\|left\)\)\=\>"
    1              0.000004 syn match cssBoxProp contained "\<margin\(-\(top\|right\|bottom\|left\)\)\=\>"
    1              0.000004 syn match cssBoxProp contained "\<overflow\(-\(x\|y\|style\)\)\=\>"
    1              0.000005 syn match cssBoxProp contained "\<rotation\(-point\)\=\>"
    1              0.000007 syn keyword cssBoxAttr contained visible hidden scroll auto
    1              0.000004 syn match cssBoxAttr contained "\<no-\(display\|content\)\>"
                            
    1              0.000006 syn keyword cssCascadeProp contained all
    1              0.000006 syn keyword cssCascadeAttr contained initial unset revert
                            
    1              0.000006 syn keyword cssColorProp contained opacity
    1              0.000004 syn match cssColorProp contained "\<color-profile\>"
    1              0.000003 syn match cssColorProp contained "\<rendering-intent\>"
                            
                            
    1              0.000010 syn match cssDimensionProp contained "\<\(min\|max\)-\(width\|height\)\>"
    1              0.000001 syn keyword cssDimensionProp contained height
    1              0.000001 syn keyword cssDimensionProp contained width
                            
                            " CSS Flexible Box Layout Module Level 1
                            " http://www.w3.org/TR/css3-flexbox/
                            " CSS Box Alignment Module Level 3
                            " http://www.w3.org/TR/css-align-3/
    1              0.000012 syn match cssFlexibleBoxProp contained "\<flex\(-\(direction\|wrap\|flow\|grow\|shrink\|basis\)\)\=\>"
    1              0.000006 syn match cssFlexibleBoxProp contained "\<\(align\|justify\)\(-\(items\|self\|content\)\)\=\>"
    1              0.000001 syn keyword cssFlexibleBoxProp contained order
                            
    1              0.000009 syn match cssFlexibleBoxAttr contained "\<\(row\|column\|wrap\)\(-reverse\)\=\>"
    1              0.000002 syn keyword cssFlexibleBoxAttr contained nowrap stretch baseline center
    1              0.000004 syn match cssFlexibleBoxAttr contained "\<flex\(-\(start\|end\)\)\=\>"
    1              0.000005 syn match cssFlexibleBoxAttr contained "\<space\(-\(between\|around\)\)\=\>"
                            
                            " CSS Fonts Module Level 3
                            " http://www.w3.org/TR/css-fonts-3/
    1              0.000025 syn match cssFontProp contained "\<font\(-\(family\|\|feature-settings\|kerning\|language-override\|size\(-adjust\)\=\|stretch\|style\|synthesis\|variant\(-\(alternates\|caps\|east-asian\|ligatures\|numeric\|position\)\)\=\|weight\)\)\=\>"
                            
                            " font attributes
    1              0.000007 syn keyword cssFontAttr contained icon menu caption
    1              0.000005 syn match cssFontAttr contained "\<message-box\>"
    1              0.000003 syn match cssFontAttr contained "\<status-bar\>"
    1              0.000002 syn keyword cssFontAttr contained larger smaller
    1              0.000005 syn match cssFontAttr contained "\<\(x\{1,2\}-\)\=\(large\|small\)\>"
    1              0.000003 syn match cssFontAttr contained "\<small-\(caps\|caption\)\>"
                            " font-family attributes
    1              0.000005 syn match cssFontAttr contained "\<\(sans-\)\=serif\>"
    1              0.000011 syn keyword cssFontAttr contained Antiqua Arial Black Book Charcoal Comic Courier Dingbats Gadget Geneva Georgia Grande Helvetica Impact Linotype Lucida MS Monaco Neue New Palatino Roboto Roman Symbol Tahoma Times Trebuchet Verdana Webdings Wingdings York Zapf
    1              0.000002 syn keyword cssFontAttr contained cursive fantasy monospace
                            " font-feature-settings attributes
    1              0.000002 syn keyword cssFontAttr contained on off
                            " font-stretch attributes
    1              0.000006 syn match cssFontAttr contained "\<\(\(ultra\|extra\|semi\)-\)\=\(condensed\|expanded\)\>"
                            " font-style attributes
    1              0.000001 syn keyword cssFontAttr contained italic oblique
                            " font-synthesis attributes
    1              0.000001 syn keyword cssFontAttr contained weight style
                            " font-weight attributes
    1              0.000002 syn keyword cssFontAttr contained bold bolder lighter
                            " TODO: font-variant-* attributes
                            "------------------------------------------------
                            
                            " Webkit specific property/attributes
    1              0.000003 syn match cssFontProp contained "\<font-smooth\>"
    1              0.000004 syn match cssFontAttr contained "\<\(subpixel-\)\=\antialiased\>"
                            
                            
                            " CSS Multi-column Layout Module
                            " http://www.w3.org/TR/css3-multicol/
    1              0.000009 syn match cssMultiColumnProp contained "\<break-\(after\|before\|inside\)\>"
    1              0.000008 syn match cssMultiColumnProp contained "\<column-\(count\|fill\|gap\|rule\(-\(color\|style\|width\)\)\=\|span\|width\)\>"
    1              0.000001 syn keyword cssMultiColumnProp contained columns
    1              0.000007 syn keyword cssMultiColumnAttr contained balance medium
    1              0.000002 syn keyword cssMultiColumnAttr contained always left right page column
    1              0.000004 syn match cssMultiColumnAttr contained "\<avoid\(-\(page\|column\)\)\=\>"
                            
                            " http://www.w3.org/TR/css3-break/#page-break
    1              0.000005 syn match cssMultiColumnProp contained "\<page\(-break-\(before\|after\|inside\)\)\=\>"
                            
                            " http://www.w3.org/TR/SVG11/interact.html
    1              0.000008 syn match cssInteractProp contained "\<pointer-events\>"
    1              0.000010 syn match cssInteractAttr contained "\<\(visible\)\=\(Painted\|Fill\|Stroke\)\=\>"
                            
                            " TODO find following items in w3c docs.
    1              0.000007 syn keyword cssGeneratedContentProp contained quotes crop
    1              0.000005 syn match cssGeneratedContentProp contained "\<counter-\(reset\|increment\)\>"
    1              0.000003 syn match cssGeneratedContentProp contained "\<move-to\>"
    1              0.000003 syn match cssGeneratedContentProp contained "\<page-policy\>"
    1              0.000009 syn match cssGeneratedContentAttr contained "\<\(no-\)\=\(open\|close\)-quote\>"
                            
                            " https://www.w3.org/TR/css-grid-1/
    1              0.000007 syn match cssGridProp contained "\<grid\>"
    1              0.000005 syn match cssGridProp contained "\<grid-template\(-\(columns\|rows\|areas\)\)\=\>"
    1              0.000007 syn match cssGridProp contained "\<grid-\(column\|row\)\(-\(start\|end\|gap\)\)\=\>"
    1              0.000003 syn match cssGridProp contained "\<grid-\(area\|gap\)\>"
    1              0.000004 syn match cssGridProp contained "\<grid-auto-\(flow\|rows\|columns\)\>"
                            
    1              0.000009 syn match cssHyerlinkProp contained "\<target\(-\(name\|new\|position\)\)\=\>"
                            
    1              0.000009 syn match cssListProp contained "\<list-style\(-\(type\|position\|image\)\)\=\>"
    1              0.000011 syn match cssListAttr contained "\<\(lower\|upper\)-\(roman\|alpha\|greek\|latin\)\>"
    1              0.000004 syn match cssListAttr contained "\<\(hiragana\|katakana\)\(-iroha\)\=\>"
    1              0.000007 syn match cssListAttr contained "\<\(decimal\(-leading-zero\)\=\|cjk-ideographic\)\>"
    1              0.000003 syn keyword cssListAttr contained disc circle square hebrew armenian georgian
    1              0.000002 syn keyword cssListAttr contained inside outside
                            
    1              0.000008 syn keyword cssPositioningProp contained bottom clear clip display float left
    1              0.000002 syn keyword cssPositioningProp contained position right top visibility
    1              0.000004 syn match cssPositioningProp contained "\<z-index\>"
    1              0.000008 syn keyword cssPositioningAttr contained block compact grid
    1              0.000010 syn match cssPositioningAttr contained "\<table\(-\(row-group\|\(header\|footer\)-group\|row\|column\(-group\)\=\|cell\|caption\)\)\=\>"
    1              0.000002 syn keyword cssPositioningAttr contained left right both
    1              0.000003 syn match cssPositioningAttr contained "\<list-item\>"
    1              0.000006 syn match cssPositioningAttr contained "\<inline\(-\(block\|box\|table\|grid\|flex\)\)\=\>"
    1              0.000004 syn match cssPositioningAttr contained "\<flow\(-root\)\=\>"
    1              0.000003 syn keyword cssPositioningAttr contained static relative absolute fixed subgrid
                            
    1              0.000007 syn keyword cssPrintAttr contained landscape portrait crop cross always
                            
    1              0.000012 syn match cssTableProp contained "\<\(caption-side\|table-layout\|border-collapse\|border-spacing\|empty-cells\)\>"
    1              0.000008 syn keyword cssTableAttr contained fixed collapse separate show hide once always
                            
                            
    1              0.000007 syn keyword cssTextProp contained color direction hyphens
    1              0.000013 syn match cssTextProp "\<\(\(word\|letter\)-spacing\|text\(-\(decoration\|transform\|align\|index\|shadow\)\)\=\|vertical-align\|unicode-bidi\|line-height\)\>"
    1              0.000010 syn match cssTextProp contained "\<text-\(justify\|outline\|warp\|align-last\|size-adjust\|rendering\|stroke\|indent\)\>"
    1              0.000005 syn match cssTextProp contained "\<\(word\|line\)-break\|\(overflow\|word\)-wrap\>"
    1              0.000003 syn match cssTextProp contained "\<white-space\>"
    1              0.000003 syn match cssTextProp contained "\<hanging-punctuation\>"
    1              0.000002 syn match cssTextProp contained "\<tab-size\>"
    1              0.000003 syn match cssTextProp contained "\<punctuation-trim\>"
    1              0.000008 syn match cssTextAttr contained "\<line-through\>"
    1              0.000005 syn match cssTextAttr contained "\<\(text-\)\=\(top\|bottom\)\>"
    1              0.000003 syn keyword cssTextAttr contained ltr rtl embed nowrap
    1              0.000003 syn keyword cssTextAttr contained underline overline blink sub super middle
    1              0.000004 syn keyword cssTextAttr contained capitalize uppercase lowercase
    1              0.000002 syn keyword cssTextAttr contained justify baseline sub super
    1              0.000003 syn keyword cssTextAttr contained optimizeLegibility optimizeSpeed geometricPrecision
    1              0.000004 syn match cssTextAttr contained "\<pre\(-\(line\|wrap\)\)\=\>"
    1              0.000003 syn match cssTextAttr contained "\<\(allow\|force\)-end\>"
    1              0.000002 syn keyword cssTextAttr contained start end adjacent
    1              0.000005 syn match cssTextAttr contained "\<inter-\(word\|ideographic\|cluster\)\>"
    1              0.000002 syn keyword cssTextAttr contained distribute kashida first last
    1              0.000002 syn keyword cssTextAttr contained clip ellipsis unrestricted suppress
    1              0.000003 syn match cssTextAttr contained "\<break-all\>"
    1              0.000004 syn match cssTextAttr contained "\<break-word\>"
    1              0.000001 syn keyword cssTextAttr contained manual
    1              0.000003 syn match cssTextAttr contained "\<bidi-override\>"
                            
    1              0.000009 syn match cssTransformProp contained "\<transform\(-\(origin\|style\)\)\=\>"
    1              0.000004 syn match cssTransformProp contained "\<perspective\(-origin\)\=\>"
    1              0.000003 syn match cssTransformProp contained "\<backface-visibility\>"
                            
                            " CSS Transitions
                            " http://www.w3.org/TR/css3-transitions/
    1              0.000013 syn match cssTransitionProp contained "\<transition\(-\(delay\|duration\|property\|timing-function\)\)\=\>"
                            
                            " transition-time-function attributes
    1              0.000009 syn match cssTransitionAttr contained "\<linear\(-gradient\)\@!\>"
    1              0.000005 syn match cssTransitionAttr contained "\<ease\(-\(in-out\|out\|in\)\)\=\>"
    1              0.000003 syn match cssTransitionAttr contained "\<step\(-start\|-end\)\=\>"
                            "------------------------------------------------
                            " CSS Basic User Interface Module Level 3 (CSS3 UI)
                            " http://www.w3.org/TR/css3-ui/
    1              0.000008 syn match cssUIProp contained "\<box-sizing\>"
    1              0.000009 syn match cssUIAttr contained "\<\(content\|padding\|border\)\(-box\)\=\>"
                            
    1              0.000001 syn keyword cssUIProp contained cursor
    1              0.000010 syn match cssUIAttr contained "\<\(\([ns]\=[ew]\=\)\|col\|row\|nesw\|nwse\)-resize\>"
    1              0.000004 syn keyword cssUIAttr contained crosshair help move pointer alias copy
    1              0.000003 syn keyword cssUIAttr contained progress wait text cell move
    1              0.000004 syn match cssUIAttr contained "\<context-menu\>"
    1              0.000003 syn match cssUIAttr contained "\<no-drop\>"
    1              0.000003 syn match cssUIAttr contained "\<not-allowed\>"
    1              0.000003 syn match cssUIAttr contained "\<all-scroll\>"
    1              0.000009 syn match cssUIAttr contained "\<\(vertical-\)\=text\>"
    1              0.000003 syn match cssUIAttr contained "\<zoom\(-in\|-out\)\=\>"
                            
    1              0.000002 syn match cssUIProp contained "\<ime-mode\>"
    1              0.000002 syn keyword cssUIAttr contained active inactive disabled
                            
    1              0.000033 syn match cssUIProp contained "\<nav-\(down\|index\|left\|right\|up\)\=\>"
    1              0.000005 syn match cssUIProp contained "\<outline\(-\(width\|style\|color\|offset\)\)\=\>"
    1              0.000001 syn keyword cssUIAttr contained invert
                            
    1              0.000002 syn keyword cssUIProp contained icon resize
    1              0.000002 syn keyword cssUIAttr contained both horizontal vertical
                            
    1              0.000003 syn match cssUIProp contained "\<text-overflow\>"
    1              0.000002 syn keyword cssUIAttr contained clip ellipsis
                            
    1              0.000003 syn match cssUIProp contained "\<image-rendering\>"
    1              0.000001 syn keyword cssUIAttr contained pixellated
    1              0.000003 syn match cssUIAttr contained "\<crisp-edges\>"
                            
                            "------------------------------------------------
                            " Webkit/iOS specific attributes
    1              0.000002 syn match cssUIAttr contained '\<preserve-3d\>'
                            " IE specific attributes
    1              0.000007 syn match cssIEUIAttr contained '\<bicubic\>'
                            
                            " Webkit/iOS specific properties
    1              0.000020 syn match cssUIProp contained '\<tap-highlight-color\|user-select\|touch-callout\>'
                            " IE specific properties
    1              0.000011 syn match cssIEUIProp contained '\<interpolation-mode\|zoom\|filter\>'
                            
                            " Webkit/Firebox specific properties/attributes
    1              0.000001 syn keyword cssUIProp contained appearance
    1              0.000004 syn keyword cssUIAttr contained window button field icon document menu
                            
                            
    1              0.000009 syn match cssAuralProp contained "\<\(pause\|cue\)\(-\(before\|after\)\)\=\>"
    1              0.000009 syn match cssAuralProp contained "\<\(play-during\|speech-rate\|voice-family\|pitch\(-range\)\=\|speak\(-\(punctuation\|numeral\|header\)\)\=\)\>"
    1              0.000003 syn keyword cssAuralProp contained volume during azimuth elevation stress richness
    1              0.000008 syn match cssAuralAttr contained "\<\(x-\)\=\(soft\|loud\)\>"
    1              0.000001 syn keyword cssAuralAttr contained silent
    1              0.000003 syn match cssAuralAttr contained "\<spell-out\>"
    1              0.000002 syn keyword cssAuralAttr contained non mix
    1              0.000003 syn match cssAuralAttr contained "\<\(left\|right\)-side\>"
    1              0.000004 syn match cssAuralAttr contained "\<\(far\|center\)-\(left\|center\|right\)\>"
    1              0.000002 syn keyword cssAuralAttr contained leftwards rightwards behind
    1              0.000002 syn keyword cssAuralAttr contained below level above lower higher
    1              0.000004 syn match cssAuralAttr contained "\<\(x-\)\=\(slow\|fast\|low\|high\)\>"
    1              0.000002 syn keyword cssAuralAttr contained faster slower
    1              0.000003 syn keyword cssAuralAttr contained male female child code digits continuous
                            
                            " mobile text
    1              0.000008 syn match cssMobileTextProp contained "\<text-size-adjust\>"
                            
    1              0.000008 syn keyword cssMediaProp contained width height orientation scan
    1              0.000005 syn match cssMediaProp contained /\(\(max\|min\)-\)\=\(\(device\)-\)\=aspect-ratio/
    1              0.000004 syn match cssMediaProp contained /\(\(max\|min\)-\)\=device-pixel-ratio/
    1              0.000006 syn match cssMediaProp contained /\(\(max\|min\)-\)\=device-\(height\|width\)/
    1              0.000008 syn match cssMediaProp contained /\(\(max\|min\)-\)\=\(height\|width\|resolution\|monochrome\|color\(-index\)\=\)/
    1              0.000008 syn keyword cssMediaAttr contained portrait landscape progressive interlace
    1              0.000020 syn match cssKeyFrameProp contained /\(\d\+\(\.\d\+\)\?%\|\(\<from\|to\>\)\)/ nextgroup=cssDefinition
    1              0.000013 syn match cssPageMarginProp /@\(\(top\|left\|right\|bottom\)-\(left\|center\|right\|middle\|bottom\)\)\(-corner\)\=/ contained nextgroup=cssDefinition
    1              0.000007 syn keyword cssPageProp contained content size
    1              0.000002 syn keyword cssPageProp contained orphans widows
    1              0.000007 syn keyword cssFontDescriptorProp contained src
    1              0.000004 syn match cssFontDescriptorProp contained "\<unicode-range\>"
                            " unicode-range attributes
    1              0.000009 syn match cssFontDescriptorAttr contained "U+[0-9A-Fa-f?]\+"
    1              0.000003 syn match cssFontDescriptorAttr contained "U+\x\+-\x\+"
                            
    1              0.000007 syn match cssBraces contained "[{}]"
    1              0.000008 syn match cssError contained "{@<>"
    1              0.000799 syn region cssDefinition transparent matchgroup=cssBraces start='{' end='}' contains=cssTagName,cssAttributeSelector,cssClassName,cssIdentifier,cssAtRule,cssAttrRegion,css.*Prop,cssComment,cssValue.*,cssColor,cssURL,cssImportant,cssCustomProp,cssError,cssStringQ,cssStringQQ,cssFunction,cssUnicodeEscape,cssVendor,cssDefinition,cssHacks,cssNoise fold
    1              0.000009 syn match cssBraceError "}"
    1              0.000008 syn match cssAttrComma ","
                            
                            " Pseudo class
                            " http://www.w3.org/TR/css3-selectors/
    1              0.000095 syn match cssPseudoClass ":[A-Za-z0-9_-]*" contains=cssNoise,cssPseudoClassId,cssUnicodeEscape,cssVendor,cssPseudoClassFn
    1              0.000007 syn keyword cssPseudoClassId contained link visited active hover before after left right
    1              0.000005 syn keyword cssPseudoClassId contained root empty target enable disabled checked invalid
    1              0.000007 syn match cssPseudoClassId contained "\<first-\(line\|letter\)\>"
    1              0.000008 syn match cssPseudoClassId contained "\<\(first\|last\|only\)-\(of-type\|child\)\>"
    1              0.000013 syn region cssPseudoClassFn contained matchgroup=cssFunctionName start="\<\(not\|lang\|\(nth\|nth-last\)-\(of-type\|child\)\)(" end=")" contains=cssStringQ,cssStringQQ
                            " ------------------------------------
                            " Vendor specific properties
    1              0.000003 syn match cssPseudoClassId contained  "\<selection\>"
    1              0.000004 syn match cssPseudoClassId contained  "\<focus\(-inner\)\=\>"
    1              0.000004 syn match cssPseudoClassId contained  "\<\(input-\)\=placeholder\>"
                            
                            " Misc highlight groups
    1              0.000137 syntax match cssUnitDecorators /\(#\|-\|+\|%\|mm\|cm\|in\|pt\|pc\|em\|ex\|px\|ch\|rem\|vh\|vw\|vmin\|vmax\|dpi\|dppx\|dpcm\|Hz\|kHz\|s\|ms\|deg\|grad\|rad\)/ contained
    1              0.000005 syntax match cssNoise contained /\(:\|;\|\/\)/
                            
                            " Comment
    1              0.000008 syn region cssComment start="/\*" end="\*/" contains=@Spell fold
                            
    1              0.000005 syn match cssUnicodeEscape "\\\x\{1,6}\s\?"
    1              0.000048 syn match cssSpecialCharQQ +\\\\\|\\"+ contained
    1              0.000010 syn match cssSpecialCharQ +\\\\\|\\'+ contained
    1              0.000010 syn region cssStringQQ start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=cssUnicodeEscape,cssSpecialCharQQ
    1              0.000009 syn region cssStringQ start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=cssUnicodeEscape,cssSpecialCharQ
                            
                            " Vendor Prefix
    1              0.000004 syn match cssVendor contained "-\(webkit\|moz\|o\|ms\)-"
                            
                            " Various CSS Hack characters
                            " In earlier versions of IE (6 and 7), one can prefix property names
                            " with a _ or * to isolate those definitions to particular versions of IE
                            " This is purely decorative and therefore we assign to the same highlight
                            " group to cssVendor, for more information:
                            " http://www.paulirish.com/2009/browser-specific-css-hacks/
    1              0.000003 syn match cssHacks contained /\(_\|*\)/
                            
                            " Attr Enhance
                            " Some keywords are both Prop and Attr, so we have to handle them
                            " cssPseudoClassId is hidden by cssAttrRegion, so we add it here. see #69
    1              0.001123 syn region cssAttrRegion start=/:/ end=/\ze\(;\|)\|}\|{\)/ contained contains=cssPseudoClassId,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
                            " Hack for transition
                            " 'transition' has Props after ':'.
    1              0.001594 syn region cssAttrRegion start=/transition\s*:/ end=/\ze\(;\|)\|}\)/ contained contains=css.*Prop,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
    1              0.000017 syn match cssAtKeyword /@\(font-face\|media\|keyframes\|import\|charset\|namespace\|page\|supports\)/
                            
    1              0.000010 syn keyword cssAtRuleLogical only not and contained
                            
                            " @media
                            " Reference: http://www.w3.org/TR/css3-mediaqueries/
    1              0.000022 syn region cssAtRule start=/@media\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssVendor,cssMediaType,cssComment,cssCustomProp,cssFunctionName nextgroup=cssDefinition
    1              0.000005 syn keyword cssMediaType contained screen print aural braille embossed handheld projection tty tv speech all contained
                            
                            " @page
                            " http://www.w3.org/TR/css3-page/
    1              0.000014 syn region cssAtRule start=/@page\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssPagePseudo,cssComment nextgroup=cssDefinition
    1              0.000005 syn match cssPagePseudo /:\(left\|right\|first\|blank\)/ contained skipwhite skipnl
                            " @keyframe
                            " http://www.w3.org/TR/css3-animations/#keyframes
    1              0.000010 syn region cssAtRule start=/@\(-[a-z]\+-\)\=keyframes\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssVendor,cssComment nextgroup=cssDefinition
                            
    1              0.000015 syn region cssAtRule start=/@import\>/    end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword,cssURL,cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssMediaType
    1              0.000010 syn region cssAtRule start=/@charset\>/   end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
    1              0.000009 syn region cssAtRule start=/@namespace\>/ end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
                            
                            " @supports
                            " https://www.w3.org/TR/css3-conditional/#at-supports
    1              0.000849 syn region cssAtRule start=/@supports\>/ end=/\ze{/ skipwhite skipnl contains=cssAtRuleLogical,cssAttrRegion,css.*Prop,cssValue.*,cssVendor,cssAtKeyword,cssComment nextgroup=cssDefinition
                            
                            
    1              0.000005 if main_syntax == "css"
                              syn sync minlines=10
    1              0.000001 endif
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
    1              0.000007 hi def link cssComment Comment
    1              0.000005 hi def link cssVendor Comment
    1              0.000005 hi def link cssHacks Comment
    1              0.000006 hi def link cssTagName Statement
    1              0.000010 hi def link cssDeprecated Error
    1              0.000005 hi def link cssSelectorOp Special
    1              0.000005 hi def link cssSelectorOp2 Special
    1              0.000004 hi def link cssAttrComma Special
                            
    1              0.000006 hi def link cssAnimationProp cssProp
    1              0.000002 hi def link cssBackgroundProp cssProp
    1              0.000001 hi def link cssBorderProp cssProp
    1              0.000001 hi def link cssBoxProp cssProp
    1              0.000001 hi def link cssCascadeProp cssProp
    1              0.000001 hi def link cssColorProp cssProp
    1              0.000006 hi def link cssContentForPagedMediaProp cssProp
    1              0.000001 hi def link cssDimensionProp cssProp
    1              0.000001 hi def link cssFlexibleBoxProp cssProp
    1              0.000001 hi def link cssFontProp cssProp
    1              0.000001 hi def link cssGeneratedContentProp cssProp
    1              0.000001 hi def link cssGridProp cssProp
    1              0.000001 hi def link cssHyerlinkProp cssProp
    1              0.000001 hi def link cssInteractProp cssProp
    1              0.000006 hi def link cssLineboxProp cssProp
    1              0.000001 hi def link cssListProp cssProp
    1              0.000006 hi def link cssMarqueeProp cssProp
    1              0.000002 hi def link cssMultiColumnProp cssProp
    1              0.000006 hi def link cssPagedMediaProp cssProp
    1              0.000001 hi def link cssPositioningProp cssProp
    1              0.000006 hi def link cssPrintProp cssProp
    1              0.000006 hi def link cssRubyProp cssProp
    1              0.000006 hi def link cssSpeechProp cssProp
    1              0.000001 hi def link cssTableProp cssProp
    1              0.000001 hi def link cssTextProp cssProp
    1              0.000001 hi def link cssTransformProp cssProp
    1              0.000001 hi def link cssTransitionProp cssProp
    1              0.000001 hi def link cssUIProp cssProp
    1              0.000001 hi def link cssIEUIProp cssProp
    1              0.000001 hi def link cssAuralProp cssProp
    1              0.000006 hi def link cssRenderProp cssProp
    1              0.000001 hi def link cssMobileTextProp cssProp
                            
    1              0.000006 hi def link cssAnimationAttr cssAttr
    1              0.000002 hi def link cssBackgroundAttr cssAttr
    1              0.000001 hi def link cssBorderAttr cssAttr
    1              0.000001 hi def link cssBoxAttr cssAttr
    1              0.000006 hi def link cssContentForPagedMediaAttr cssAttr
    1              0.000006 hi def link cssDimensionAttr cssAttr
    1              0.000001 hi def link cssFlexibleBoxAttr cssAttr
    1              0.000001 hi def link cssFontAttr cssAttr
    1              0.000001 hi def link cssGeneratedContentAttr cssAttr
    1              0.000005 hi def link cssGridAttr cssAttr
    1              0.000007 hi def link cssHyerlinkAttr cssAttr
    1              0.000002 hi def link cssInteractAttr cssAttr
    1              0.000008 hi def link cssLineboxAttr cssAttr
    1              0.000002 hi def link cssListAttr cssAttr
    1              0.000008 hi def link cssMarginAttr cssAttr
    1              0.000011 hi def link cssMarqueeAttr cssAttr
    1              0.000002 hi def link cssMultiColumnAttr cssAttr
    1              0.000009 hi def link cssPaddingAttr cssAttr
    1              0.000008 hi def link cssPagedMediaAttr cssAttr
    1              0.000002 hi def link cssPositioningAttr cssAttr
    1              0.000002 hi def link cssGradientAttr cssAttr
    1              0.000002 hi def link cssPrintAttr cssAttr
    1              0.000009 hi def link cssRubyAttr cssAttr
    1              0.000006 hi def link cssSpeechAttr cssAttr
    1              0.000001 hi def link cssTableAttr cssAttr
    1              0.000001 hi def link cssTextAttr cssAttr
    1              0.000006 hi def link cssTransformAttr cssAttr
    1              0.000001 hi def link cssTransitionAttr cssAttr
    1              0.000001 hi def link cssUIAttr cssAttr
    1              0.000001 hi def link cssIEUIAttr cssAttr
    1              0.000001 hi def link cssAuralAttr cssAttr
    1              0.000006 hi def link cssRenderAttr cssAttr
    1              0.000002 hi def link cssCascadeAttr cssAttr
    1              0.000002 hi def link cssCommonAttr cssAttr
                            
    1              0.000005 hi def link cssPseudoClassId PreProc
    1              0.000010 hi def link cssPseudoClassLang Constant
    1              0.000006 hi def link cssValueLength Number
    1              0.000006 hi def link cssValueInteger Number
    1              0.000006 hi def link cssValueNumber Number
    1              0.000006 hi def link cssValueAngle Number
    1              0.000006 hi def link cssValueTime Number
    1              0.000005 hi def link cssValueFrequency Number
    1              0.000005 hi def link cssFunction Constant
    1              0.000005 hi def link cssURL String
    1              0.000005 hi def link cssFunctionName Function
    1              0.000005 hi def link cssFunctionComma Function
    1              0.000005 hi def link cssColor Constant
    1              0.000005 hi def link cssIdentifier Function
    1              0.000005 hi def link cssAtRule Include
    1              0.000005 hi def link cssAtKeyword PreProc
    1              0.000005 hi def link cssImportant Special
    1              0.000005 hi def link cssCustomProp Special
    1              0.000005 hi def link cssBraces Function
    1              0.000005 hi def link cssBraceError Error
    1              0.000005 hi def link cssError Error
    1              0.000005 hi def link cssUnicodeEscape Special
    1              0.000005 hi def link cssStringQQ String
    1              0.000005 hi def link cssStringQ String
    1              0.000005 hi def link cssAttributeSelector String
    1              0.000004 hi def link cssMediaType Special
    1              0.000010 hi def link cssMediaComma Normal
    1              0.000005 hi def link cssAtRuleLogical Statement
    1              0.000002 hi def link cssMediaProp cssProp
    1              0.000002 hi def link cssMediaAttr cssAttr
    1              0.000006 hi def link cssPagePseudo PreProc
    1              0.000002 hi def link cssPageMarginProp cssAtKeyword
    1              0.000001 hi def link cssPageProp cssProp
    1              0.000005 hi def link cssKeyFrameProp Constant
    1              0.000009 hi def link cssFontDescriptor Special
    1              0.000002 hi def link cssFontDescriptorProp cssProp
    1              0.000002 hi def link cssFontDescriptorAttr cssAttr
    1              0.000011 hi def link cssUnicodeRange Constant
    1              0.000005 hi def link cssClassName Function
    1              0.000005 hi def link cssClassNameDot Function
    1              0.000005 hi def link cssProp StorageClass
    1              0.000006 hi def link cssAttr Constant
    1              0.000006 hi def link cssUnitDecorators Number
    1              0.000006 hi def link cssNoise Noise
                            
    1              0.000004 let b:current_syntax = "css"
                            
    1              0.000002 if main_syntax == 'css'
                              unlet main_syntax
    1              0.000001 endif
                            
    1              0.000010 let &cpo = s:cpo_save
    1              0.000002 unlet s:cpo_save
                            
                            " vim: ts=8

SCRIPT  /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/ftplugin/markdown.vim
Sourced 1 time
Total time:   0.007377
 Self time:   0.005791

count  total (s)   self (s)
                            " Vim filetype plugin
                            " Language:		Markdown
                            " Maintainer:		Tim Pope <vimNOSPAM@tpope.org>
                            " Last Change:		2019 Dec 05
                            
    1              0.000006 if exists("b:did_ftplugin")
                              finish
    1              0.000001 endif
                            
    1   0.006809   0.005223 runtime! ftplugin/html.vim ftplugin/html_*.vim ftplugin/html/*.vim
                            
    1              0.000009 setlocal comments=fb:*,fb:-,fb:+,n:> commentstring=<!--%s-->
    1              0.000006 setlocal formatoptions+=tcqln formatoptions-=r formatoptions-=o
    1              0.000003 setlocal formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\|^[-*+]\\s\\+\\\|^\\[^\\ze[^\\]]\\+\\]:
                            
    1              0.000006 if exists('b:undo_ftplugin')
    1              0.000004   let b:undo_ftplugin .= "|setl cms< com< fo< flp<"
                            else
                              let b:undo_ftplugin = "setl cms< com< fo< flp<"
    1              0.000001 endif
                            
    1              0.000004 function! s:NotCodeBlock(lnum) abort
                              return synIDattr(synID(v:lnum, 1, 1), 'name') !=# 'markdownCode'
                            endfunction
                            
    1              0.000001 function! MarkdownFold() abort
                              let line = getline(v:lnum)
                            
                              if line =~# '^#\+ ' && s:NotCodeBlock(v:lnum)
                                return ">" . match(line, ' ')
                              endif
                            
                              let nextline = getline(v:lnum + 1)
                              if (line =~ '^.\+$') && (nextline =~ '^=\+$') && s:NotCodeBlock(v:lnum + 1)
                                return ">1"
                              endif
                            
                              if (line =~ '^.\+$') && (nextline =~ '^-\+$') && s:NotCodeBlock(v:lnum + 1)
                                return ">2"
                              endif
                            
                              return "="
                            endfunction
                            
    1              0.000002 function! s:HashIndent(lnum) abort
                              let hash_header = matchstr(getline(a:lnum), '^#\{1,6}')
                              if len(hash_header)
                                return hash_header
                              else
                                let nextline = getline(a:lnum + 1)
                                if nextline =~# '^=\+\s*$'
                                  return '#'
                                elseif nextline =~# '^-\+\s*$'
                                  return '##'
                                endif
                              endif
                            endfunction
                            
    1              0.000001 function! MarkdownFoldText() abort
                              let hash_indent = s:HashIndent(v:foldstart)
                              let title = substitute(getline(v:foldstart), '^#\+\s*', '', '')
                              let foldsize = (v:foldend - v:foldstart + 1)
                              let linecount = '['.foldsize.' lines]'
                              return hash_indent.' '.title.' '.linecount
                            endfunction
                            
    1              0.000005 if has("folding") && exists("g:markdown_folding")
                              setlocal foldexpr=MarkdownFold()
                              setlocal foldmethod=expr
                              setlocal foldtext=MarkdownFoldText()
                              let b:undo_ftplugin .= " foldexpr< foldmethod< foldtext<"
    1              0.000001 endif
                            
                            " vim:set sw=2:

SCRIPT  /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/ftplugin/html.vim
Sourced 1 time
Total time:   0.001571
 Self time:   0.000590

count  total (s)   self (s)
                            " Vim filetype plugin file
                            " Language:	html
                            " Maintainer:	Dan Sharp <dwsharp at users dot sourceforge dot net>
                            " Last Changed: 20 Jan 2009
                            " URL:		http://dwsharp.users.sourceforge.net/vim/ftplugin
                            
    1              0.000007 if exists("b:did_ftplugin") | finish | endif
    1              0.000003 let b:did_ftplugin = 1
                            
                            " Make sure the continuation lines below do not cause problems in
                            " compatibility mode.
    1              0.000006 let s:save_cpo = &cpo
    1              0.000009 set cpo-=C
                            
    1              0.000005 setlocal matchpairs+=<:>
    1              0.000003 setlocal commentstring=<!--%s-->
    1              0.000003 setlocal comments=s:<!--,m:\ \ \ \ ,e:-->
                            
    1              0.000004 if exists("g:ft_html_autocomment") && (g:ft_html_autocomment == 1)
                                setlocal formatoptions-=t formatoptions+=croql
    1              0.000001 endif
                            
    1              0.000002 if exists('&omnifunc')
    1              0.000003   setlocal omnifunc=htmlcomplete#CompleteTags
    1   0.001452   0.000471   call htmlcomplete#DetectOmniFlavor()
    1              0.000001 endif
                            
                            " HTML:  thanks to Johannes Zellner and Benji Fisher.
    1              0.000003 if exists("loaded_matchit")
    1              0.000002     let b:match_ignorecase = 1
    1              0.000006     let b:match_words = '<:>,' .
                                \ '<\@<=[ou]l\>[^>]*\%(>\|$\):<\@<=li\>:<\@<=/[ou]l>,' .
                                \ '<\@<=dl\>[^>]*\%(>\|$\):<\@<=d[td]\>:<\@<=/dl>,' .
                                \ '<\@<=\([^/][^ \t>]*\)[^>]*\%(>\|$\):<\@<=/\1>'
    1              0.000001 endif
                            
                            " Change the :browse e filter to primarily show HTML-related files.
    1              0.000004 if has("gui_win32")
                                let  b:browsefilter="HTML Files (*.html,*.htm)\t*.htm;*.html\n" .
                            		\	"JavaScript Files (*.js)\t*.js\n" .
                            		\	"Cascading StyleSheets (*.css)\t*.css\n" .
                            		\	"All Files (*.*)\t*.*\n"
    1              0.000001 endif
                            
                            " Undo the stuff we changed.
    1              0.000004 let b:undo_ftplugin = "setlocal commentstring< matchpairs< omnifunc< comments< formatoptions<" .
                                \	" | unlet! b:match_ignorecase b:match_skip b:match_words b:browsefilter"
                            
                            " Restore the saved compatibility options.
    1              0.000008 let &cpo = s:save_cpo
    1              0.000004 unlet s:save_cpo

SCRIPT  /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/autoload/htmlcomplete.vim
Sourced 1 time
Total time:   0.000925
 Self time:   0.000925

count  total (s)   self (s)
                            " Vim completion script
                            " Language:	HTML and XHTML
                            " Maintainer:	Mikolaj Machowski ( mikmach AT wp DOT pl )
                            " Last Change:	2019 Sep 27
                            
                            " Distinguish between HTML versions.
                            " To use with other HTML versions add another "elseif" condition to match
                            " proper DOCTYPE.
    1              0.000004 function! htmlcomplete#DetectOmniFlavor()
                              if &filetype == 'xhtml'
                                let b:html_omni_flavor = 'xhtml10s'
                              else
                                let b:html_omni_flavor = 'html401t'
                              endif
                              let i = 1
                              let line = ""
                              while i < 10 && i < line("$")
                                let line = getline(i)
                                if line =~ '<!DOCTYPE.*\<DTD '
                                  break
                                endif
                                let i += 1
                              endwhile
                              if line =~ '<!DOCTYPE.*\<DTD '  " doctype line found above
                                if line =~ ' HTML 3\.2'
                                  let b:html_omni_flavor = 'html32'
                                elseif line =~ ' XHTML 1\.1'
                                  let b:html_omni_flavor = 'xhtml11'
                                else    " two-step detection with strict/frameset/transitional
                                  if line =~ ' XHTML 1\.0'
                            	let b:html_omni_flavor = 'xhtml10'
                                  elseif line =~ ' HTML 4\.01'
                            	let b:html_omni_flavor = 'html401'
                                  elseif line =~ ' HTML 4.0\>'
                            	let b:html_omni_flavor = 'html40'
                                  endif
                                  if line =~ '\<Transitional\>'
                            	let b:html_omni_flavor .= 't'
                                  elseif line =~ '\<Frameset\>'
                            	let b:html_omni_flavor .= 'f'
                                  else
                            	let b:html_omni_flavor .= 's'
                                  endif
                                endif
                              endif
                            endfunction
                            
    1              0.000002 function! htmlcomplete#CompleteTags(findstart, base)
                              if a:findstart
                                " locate the start of the word
                                let line = getline('.')
                                let start = col('.') - 1
                            	let curline = line('.')
                            	let compl_begin = col('.') - 2
                                while start >= 0 && line[start - 1] =~ '\(\k\|[!:.-]\)'
                            		let start -= 1
                                endwhile
                            	" Handling of entities {{{
                            	if start >= 0 && line[start - 1] =~ '&'
                            		let b:entitiescompl = 1
                            		let b:compl_context = ''
                            		return start
                            	endif
                            	" }}}
                            	" Handling of <style> tag {{{
                            	let stylestart = searchpair('<style\>', '', '<\/style\>', "bnW")
                            	let styleend   = searchpair('<style\>', '', '<\/style\>', "nW")
                            	if stylestart != 0 && styleend != 0
                            		if stylestart <= curline && styleend >= curline
                            			let start = col('.') - 1
                            			let b:csscompl = 1
                            			while start >= 0 && line[start - 1] =~ '\(\k\|-\)'
                            				let start -= 1
                            			endwhile
                            		endif
                            	endif
                            	" }}}
                            	" Handling of <script> tag {{{
                            	let scriptstart = searchpair('<script\>', '', '<\/script\>', "bnW")
                            	let scriptend   = searchpair('<script\>', '', '<\/script\>', "nW")
                            	if scriptstart != 0 && scriptend != 0
                            		if scriptstart <= curline && scriptend >= curline
                            			let start = col('.') - 1
                            			let b:jscompl = 1
                            			let b:jsrange = [scriptstart, scriptend]
                            			while start >= 0 && line[start - 1] =~ '\k'
                            				let start -= 1
                            			endwhile
                            			" We are inside of <script> tag. But we should also get contents
                            			" of all linked external files and (secondary, less probably) other <script> tags
                            			" This logic could possible be done in separate function - may be
                            			" reused in events scripting (also with option could be reused for
                            			" CSS
                            			let b:js_extfiles = []
                            			let l = line('.')
                            			let c = col('.')
                            			call cursor(1,1)
                            			while search('<\@<=script\>', 'W') && line('.') <= l
                            				if synIDattr(synID(line('.'),col('.')-1,0),"name") !~? 'comment'
                            					let sname = matchstr(getline('.'), '<script[^>]*src\s*=\s*\([''"]\)\zs.\{-}\ze\1')
                            					if filereadable(sname)
                            						let b:js_extfiles += readfile(sname)
                            					endif
                            				endif
                            			endwhile
                            			call cursor(1,1)
                            			let js_scripttags = []
                            			while search('<script\>', 'W') && line('.') < l
                            				if matchstr(getline('.'), '<script[^>]*src') == ''
                            					let js_scripttag = getline(line('.'), search('</script>', 'W'))
                            					let js_scripttags += js_scripttag
                            				endif
                            			endwhile
                            			let b:js_extfiles += js_scripttags
                            			call cursor(l,c)
                            			unlet! l c
                            		endif
                            	endif
                            	" }}}
                            	if !exists("b:csscompl") && !exists("b:jscompl")
                            		let b:compl_context = getline('.')[0:(compl_begin)]
                            		if b:compl_context !~ '<[^>]*$'
                            			" Look like we may have broken tag. Check previous lines.
                            			let i = 1
                            			while 1
                            				let context_line = getline(curline-i)
                            				if context_line =~ '<[^>]*$'
                            					" Yep, this is this line
                            					let context_lines = getline(curline-i, curline-1) + [b:compl_context]
                            					let b:compl_context = join(context_lines, ' ')
                            					break
                            				elseif context_line =~ '>[^<]*$' || i == curline
                            					" We are in normal tag line, no need for completion at all
                            					" OR reached first line without tag at all
                            					let b:compl_context = ''
                            					break
                            				endif
                            				let i += 1
                            			endwhile
                            			" Make sure we don't have counter
                            			unlet! i
                            		endif
                            		let b:compl_context = matchstr(b:compl_context, '.*\zs<.*')
                            
                            		" Return proper start for on-events. Without that beginning of
                            		" completion will be badly reported
                            		if b:compl_context =~? 'on[a-z]*\s*=\s*\(''[^'']*\|"[^"]*\)$'
                            			let start = col('.') - 1
                            			while start >= 0 && line[start - 1] =~ '\k'
                            				let start -= 1
                            			endwhile
                            		endif
                            		" If b:compl_context begins with <? we are inside of PHP code. It
                            		" wasn't closed so PHP completion passed it to HTML
                            		if &filetype =~? 'php' && b:compl_context =~ '^<?'
                            			let b:phpcompl = 1
                            			let start = col('.') - 1
                            			while start >= 0 && line[start - 1] =~ '[a-zA-Z_0-9\x7f-\xff$]'
                            				let start -= 1
                            			endwhile
                            		endif
                            	else
                            		let b:compl_context = getline('.')[0:compl_begin]
                            	endif
                                return start
                              else
                            	" Initialize base return lists
                                let res = []
                                let res2 = []
                            	" a:base is very short - we need context
                            	let context = b:compl_context
                            	" Check if we should do CSS completion inside of <style> tag
                            	" or JS completion inside of <script> tag or PHP completion in case of <?
                            	" tag AND &ft==php
                            	if exists("b:csscompl")
                            		unlet! b:csscompl
                            		let context = b:compl_context
                            		unlet! b:compl_context
                            		return csscomplete#CompleteCSS(0, context)
                            	elseif exists("b:jscompl")
                            		unlet! b:jscompl
                            		return javascriptcomplete#CompleteJS(0, a:base)
                            	elseif exists("b:phpcompl")
                            		unlet! b:phpcompl
                            		let context = b:compl_context
                            		return phpcomplete#CompletePHP(0, a:base)
                            	else
                            		if len(b:compl_context) == 0 && !exists("b:entitiescompl")
                            			return []
                            		endif
                            		let context = matchstr(b:compl_context, '.\zs.*')
                            	endif
                            	unlet! b:compl_context
                            	" Entities completion {{{
                            	if exists("b:entitiescompl")
                            		unlet! b:entitiescompl
                            
                            		if !exists("b:html_doctype")
                            			call htmlcomplete#CheckDoctype()
                            		endif
                            		if !exists("b:html_omni")
                            			"runtime! autoload/xml/xhtml10s.vim
                            			call htmlcomplete#LoadData()
                            		endif
                            
                            	    let entities =  b:html_omni['vimxmlentities']
                            
                            		if len(a:base) == 1
                            			for m in entities
                            				if m =~ '^'.a:base
                            					call add(res, m.';')
                            				endif
                            			endfor
                            			return res
                            		else
                            			for m in entities
                            				if m =~? '^'.a:base
                            					call add(res, m.';')
                            				elseif m =~? a:base
                            					call add(res2, m.';')
                            				endif
                            			endfor
                            
                            			return res + res2
                            		endif
                            
                            
                            	endif
                            	" }}}
                            	if context =~ '>'
                            		" Generally if context contains > it means we are outside of tag and
                            		" should abandon action - with one exception: <style> span { bo
                            		if context =~ 'style[^>]\{-}>[^<]\{-}$'
                            			return csscomplete#CompleteCSS(0, context)
                            		elseif context =~ 'script[^>]\{-}>[^<]\{-}$'
                            			let b:jsrange = [line('.'), search('<\/script\>', 'nW')]
                            			return javascriptcomplete#CompleteJS(0, context)
                            		else
                            			return []
                            		endif
                            	endif
                            
                            	" If context contains > it means we are already outside of tag and we
                            	" should abandon action
                            	" If context contains white space it is attribute.
                            	" It can be also value of attribute.
                            	" We have to get first word to offer proper completions
                            	if context =~ '^\s*$'
                            		" empty or whitespace line
                            		let tag = ''
                            	else
                            		let tag = split(context)[0]
                            		" Detect if tag is uppercase to return in proper case,
                            		" we need to make it lowercase for processing
                            		if tag =~ '^[A-Z]*$'
                            			let uppercase_tag = 1
                            			let tag = tolower(tag)
                            		else
                            			let uppercase_tag = 0
                            		endif
                            	endif
                            	" Get last word, it should be attr name
                            	let attr = matchstr(context, '.*\s\zs.*')
                            	" Possible situations where any prediction would be difficult:
                            	" 1. Events attributes
                            	if context =~ '\s'
                            		" Sort out style, class, and on* cases
                            		if context =~? "\\(on[a-z]*\\|id\\|style\\|class\\)\\s*=\\s*[\"']"
                            			" Id, class completion {{{
                            			if context =~? "\\(id\\|class\\)\\s*=\\s*[\"'][a-zA-Z0-9_ -]*$"
                            				if context =~? "class\\s*=\\s*[\"'][a-zA-Z0-9_ -]*$"
                            					let search_for = "class"
                            				elseif context =~? "id\\s*=\\s*[\"'][a-zA-Z0-9_ -]*$"
                            					let search_for = "id"
                            				endif
                            				" Handle class name completion
                            				" 1. Find lines of <link stylesheet>
                            				" 1a. Check file for @import
                            				" 2. Extract filename(s?) of stylesheet,
                            				call cursor(1,1)
                            				let head = getline(search('<head\>'), search('<\/head>'))
                            				let headjoined = join(copy(head), ' ')
                            				if headjoined =~ '<style'
                            					" Remove possibly confusing CSS operators
                            					let stylehead = substitute(headjoined, '+>\*[,', ' ', 'g')
                            					if search_for == 'class'
                            						let styleheadlines = split(stylehead)
                            						let headclasslines = filter(copy(styleheadlines), "v:val =~ '\\([a-zA-Z0-9:]\\+\\)\\?\\.[a-zA-Z0-9_-]\\+'")
                            					else
                            						let stylesheet = split(headjoined, '[{}]')
                            						" Get all lines which fit id syntax
                            						let classlines = filter(copy(stylesheet), "v:val =~ '#[a-zA-Z0-9_-]\\+'")
                            						" Filter out possible color definitions
                            						call filter(classlines, "v:val !~ ':\\s*#[a-zA-Z0-9_-]\\+'")
                            						" Filter out complex border definitions
                            						call filter(classlines, "v:val !~ '\\(none\\|hidden\\|dotted\\|dashed\\|solid\\|double\\|groove\\|ridge\\|inset\\|outset\\)\\s*#[a-zA-Z0-9_-]\\+'")
                            						let templines = join(classlines, ' ')
                            						let headclasslines = split(templines)
                            						call filter(headclasslines, "v:val =~ '#[a-zA-Z0-9_-]\\+'")
                            					endif
                            					let internal = 1
                            				else
                            					let internal = 0
                            				endif
                            				let styletable = []
                            				let secimportfiles = []
                            				let filestable = filter(copy(head), "v:val =~ '\\(@import\\|link.*stylesheet\\)'")
                            				for line in filestable
                            					if line =~ "@import"
                            						let styletable += [matchstr(line, "import\\s\\+\\(url(\\)\\?[\"']\\?\\zs\\f\\+\\ze")]
                            					elseif line =~ "<link"
                            						let styletable += [matchstr(line, "href\\s*=\\s*[\"']\\zs\\f\\+\\ze")]
                            					endif
                            				endfor
                            				for file in styletable
                            					if filereadable(file)
                            						let stylesheet = readfile(file)
                            						let secimport = filter(copy(stylesheet), "v:val =~ '@import'")
                            						if len(secimport) > 0
                            							for line in secimport
                            								let secfile = matchstr(line, "import\\s\\+\\(url(\\)\\?[\"']\\?\\zs\\f\\+\\ze")
                            								let secfile = fnamemodify(file, ":p:h").'/'.secfile
                            								let secimportfiles += [secfile]
                            							endfor
                            						endif
                            					endif
                            				endfor
                            				let cssfiles = styletable + secimportfiles
                            				let classes = []
                            				for file in cssfiles
                            				  	let classlines = []
                            					if filereadable(file)
                            						let stylesheet = readfile(file)
                            						let stylefile = join(stylesheet, ' ')
                            						let stylefile = substitute(stylefile, '+>\*[,', ' ', 'g')
                            						if search_for == 'class'
                            							let stylesheet = split(stylefile)
                            							let classlines = filter(copy(stylesheet), "v:val =~ '\\([a-zA-Z0-9:]\\+\\)\\?\\.[a-zA-Z0-9_-]\\+'")
                            						else
                            							let stylesheet = split(stylefile, '[{}]')
                            							" Get all lines which fit id syntax
                            							let classlines = filter(copy(stylesheet), "v:val =~ '#[a-zA-Z0-9_-]\\+'")
                            							" Filter out possible color definitions
                            							call filter(classlines, "v:val !~ ':\\s*#[a-zA-Z0-9_-]\\+'")
                            							" Filter out complex border definitions
                            							call filter(classlines, "v:val !~ '\\(none\\|hidden\\|dotted\\|dashed\\|solid\\|double\\|groove\\|ridge\\|inset\\|outset\\)\\s*#[a-zA-Z0-9_-]\\+'")
                            							let templines = join(classlines, ' ')
                            							let stylelines = split(templines)
                            							let classlines = filter(stylelines, "v:val =~ '#[a-zA-Z0-9_-]\\+'")
                            
                            						endif
                            					endif
                            					" We gathered classes definitions from all external files
                            					let classes += classlines
                            				endfor
                            				if internal == 1
                            					let classes += headclasslines
                            				endif
                            
                            				if search_for == 'class'
                            					let elements = {}
                            					for element in classes
                            						if element =~ '^\.'
                            							let class = matchstr(element, '^\.\zs[a-zA-Z][a-zA-Z0-9_-]*\ze')
                            							let class = substitute(class, ':.*', '', '')
                            							if has_key(elements, 'common')
                            								let elements['common'] .= ' '.class
                            							else
                            								let elements['common'] = class
                            							endif
                            						else
                            							let class = matchstr(element, '[a-zA-Z1-6]*\.\zs[a-zA-Z][a-zA-Z0-9_-]*\ze')
                            							let tagname = tolower(matchstr(element, '[a-zA-Z1-6]*\ze.'))
                            							if tagname != ''
                            								if has_key(elements, tagname)
                            									let elements[tagname] .= ' '.class
                            								else
                            									let elements[tagname] = class
                            								endif
                            							endif
                            						endif
                            					endfor
                            
                            					if has_key(elements, tag) && has_key(elements, 'common')
                            						let values = split(elements[tag]." ".elements['common'])
                            					elseif has_key(elements, tag) && !has_key(elements, 'common')
                            						let values = split(elements[tag])
                            					elseif !has_key(elements, tag) && has_key(elements, 'common')
                            						let values = split(elements['common'])
                            					else
                            						return []
                            					endif
                            
                            				elseif search_for == 'id'
                            					" Find used IDs
                            					" 1. Catch whole file
                            					let filelines = getline(1, line('$'))
                            					" 2. Find lines with possible id
                            					let used_id_lines = filter(filelines, 'v:val =~ "id\\s*=\\s*[\"''][a-zA-Z0-9_-]\\+"')
                            					" 3a. Join all filtered lines
                            					let id_string = join(used_id_lines, ' ')
                            					" 3b. And split them to be sure each id is in separate item
                            					let id_list = split(id_string, 'id\s*=\s*')
                            					" 4. Extract id values
                            					let used_id = map(id_list, 'matchstr(v:val, "[\"'']\\zs[a-zA-Z0-9_-]\\+\\ze")')
                            					let joined_used_id = ','.join(used_id, ',').','
                            
                            					let allvalues = map(classes, 'matchstr(v:val, ".*#\\zs[a-zA-Z0-9_-]\\+")')
                            
                            					let values = []
                            
                            					for element in classes
                            						if joined_used_id !~ ','.element.','
                            							let values += [element]
                            						endif
                            
                            					endfor
                            
                            				endif
                            
                            				" We need special version of sbase
                            				let classbase = matchstr(context, ".*[\"']")
                            				let classquote = matchstr(classbase, '.$')
                            
                            				let entered_class = matchstr(attr, ".*=\\s*[\"']\\zs.*")
                            
                            				for m in sort(values)
                            					if m =~? '^'.entered_class
                            						call add(res, m . classquote)
                            					elseif m =~? entered_class
                            						call add(res2, m . classquote)
                            					endif
                            				endfor
                            
                            				return res + res2
                            
                            			elseif context =~? "style\\s*=\\s*[\"'][^\"']*$"
                            				return csscomplete#CompleteCSS(0, context)
                            
                            			endif
                            			" }}}
                            			" Complete on-events {{{
                            			if context =~? 'on[a-z]*\s*=\s*\(''[^'']*\|"[^"]*\)$'
                            				" We have to:
                            				" 1. Find external files
                            				let b:js_extfiles = []
                            				let l = line('.')
                            				let c = col('.')
                            				call cursor(1,1)
                            				while search('<\@<=script\>', 'W') && line('.') <= l
                            					if synIDattr(synID(line('.'),col('.')-1,0),"name") !~? 'comment'
                            						let sname = matchstr(getline('.'), '<script[^>]*src\s*=\s*\([''"]\)\zs.\{-}\ze\1')
                            						if filereadable(sname)
                            							let b:js_extfiles += readfile(sname)
                            						endif
                            					endif
                            				endwhile
                            				" 2. Find at least one <script> tag
                            				call cursor(1,1)
                            				let js_scripttags = []
                            				while search('<script\>', 'W') && line('.') < l
                            					if matchstr(getline('.'), '<script[^>]*src') == ''
                            						let js_scripttag = getline(line('.'), search('</script>', 'W'))
                            						let js_scripttags += js_scripttag
                            					endif
                            				endwhile
                            				let b:js_extfiles += js_scripttags
                            
                            				" 3. Proper call for javascriptcomplete#CompleteJS
                            				call cursor(l,c)
                            				let js_context = matchstr(a:base, '\k\+$')
                            				let js_shortcontext = substitute(a:base, js_context.'$', '', '')
                            				let b:compl_context = context
                            				let b:jsrange = [l, l]
                            				unlet! l c
                            				return javascriptcomplete#CompleteJS(0, js_context)
                            
                            			endif
                            
                            			" }}}
                            			let stripbase = matchstr(context, ".*\\(on[a-zA-Z]*\\|style\\|class\\)\\s*=\\s*[\"']\\zs.*")
                            			" Now we have context stripped from all chars up to style/class.
                            			" It may fail with some strange style value combinations.
                            			if stripbase !~ "[\"']"
                            				return []
                            			endif
                            		endif
                            		" Value of attribute completion {{{
                            		" If attr contains =\s*[\"'] we catched value of attribute
                            		if attr =~ "=\s*[\"']" || attr =~ "=\s*$"
                            			" Let do attribute specific completion
                            			let attrname = matchstr(attr, '.*\ze\s*=')
                            			let entered_value = matchstr(attr, ".*=\\s*[\"']\\?\\zs.*")
                            			let values = []
                            			" Load data {{{
                            			if !exists("b:html_doctype")
                            				call htmlcomplete#CheckDoctype()
                            			endif
                            			if !exists("b:html_omni")
                            				"runtime! autoload/xml/xhtml10s.vim
                            				call htmlcomplete#LoadData()
                            			endif
                            			" }}}
                            			if attrname == 'href'
                            				" Now we are looking for local anchors defined by name or id
                            				if entered_value =~ '^#'
                            					let file = join(getline(1, line('$')), ' ')
                            					" Split it be sure there will be one id/name element in
                            					" item, it will be also first word [a-zA-Z0-9_-] in element
                            					let oneelement = split(file, "\\(meta \\)\\@<!\\(name\\|id\\)\\s*=\\s*[\"']")
                            					for i in oneelement
                            						let values += ['#'.matchstr(i, "^[a-zA-Z][a-zA-Z0-9%_-]*")]
                            					endfor
                            				endif
                            			else
                            				if has_key(b:html_omni, tag) && has_key(b:html_omni[tag][1], attrname)
                            					let values = b:html_omni[tag][1][attrname]
                            				else
                            					return []
                            				endif
                            			endif
                            
                            			if len(values) == 0
                            				return []
                            			endif
                            
                            			" We need special version of sbase
                            			let attrbase = matchstr(context, ".*[\"']")
                            			let attrquote = matchstr(attrbase, '.$')
                            			if attrquote !~ "['\"]"
                            				let attrquoteopen = '"'
                            				let attrquote = '"'
                            			else
                            				let attrquoteopen = ''
                            			endif
                            
                            			for m in values
                            				" This if is needed to not offer all completions as-is
                            				" alphabetically but sort them. Those beginning with entered
                            				" part will be as first choices
                            				if m =~ '^'.entered_value
                            					call add(res, attrquoteopen . m . attrquote)
                            				elseif m =~ entered_value
                            					call add(res2, attrquoteopen . m . attrquote)
                            				endif
                            			endfor
                            
                            			return res + res2
                            
                            		endif
                            		" }}}
                            		" Attribute completion {{{
                            		" Shorten context to not include last word
                            		let sbase = matchstr(context, '.*\ze\s.*')
                            
                            		" Load data {{{
                            		if !exists("b:html_doctype")
                            			call htmlcomplete#CheckDoctype()
                            		endif
                            		if !exists("b:html_omni")
                            			call htmlcomplete#LoadData()
                            		endif
                            		" }}}
                            
                            		if has_key(b:html_omni, tag)
                            			let attrs = keys(b:html_omni[tag][1])
                            		else
                            			return []
                            		endif
                            
                            		for m in sort(attrs)
                            			if m =~ '^'.attr
                            				call add(res, m)
                            			elseif m =~ attr
                            				call add(res2, m)
                            			endif
                            		endfor
                            		let menu = res + res2
                            		if has_key(b:html_omni, 'vimxmlattrinfo')
                            			let final_menu = []
                            			for i in range(len(menu))
                            				let item = menu[i]
                            				if has_key(b:html_omni['vimxmlattrinfo'], item)
                            					let m_menu = b:html_omni['vimxmlattrinfo'][item][0]
                            					let m_info = b:html_omni['vimxmlattrinfo'][item][1]
                            				else
                            					let m_menu = ''
                            					let m_info = ''
                            				endif
                            				if len(b:html_omni[tag][1][item]) > 0 && b:html_omni[tag][1][item][0] =~ '^\(BOOL\|'.item.'\)$'
                            					let item = item
                            					let m_menu = 'Bool'
                            				else
                            					let item .= '="'
                            				endif
                            				let final_menu += [{'word':item, 'menu':m_menu, 'info':m_info}]
                            			endfor
                            		else
                            			let final_menu = []
                            			for i in range(len(menu))
                            				let item = menu[i]
                            				if len(b:html_omni[tag][1][item]) > 0 && b:html_omni[tag][1][item][0] =~ '^\(BOOL\|'.item.'\)$'
                            					let item = item
                            				else
                            					let item .= '="'
                            				endif
                            				let final_menu += [item]
                            			endfor
                            			return final_menu
                            
                            		endif
                            		return final_menu
                            
                            	endif
                            	" }}}
                            	" Close tag {{{
                            	let b:unaryTagsStack = "base meta link hr br param img area input col"
                            	if context =~ '^\/'
                            		if context =~ '^\/.'
                            			return []
                            		else
                            			let opentag = xmlcomplete#GetLastOpenTag("b:unaryTagsStack")
                            			return [opentag.">"]
                            		endif
                            	endif
                            	" }}}
                            	" Load data {{{
                            	if !exists("b:html_doctype")
                            		call htmlcomplete#CheckDoctype()
                            	endif
                            	if !exists("b:html_omni")
                            		"runtime! autoload/xml/xhtml10s.vim
                            		call htmlcomplete#LoadData()
                            	endif
                            	" }}}
                            	" Tag completion {{{
                            	" Deal with tag completion.
                            	let opentag = tolower(xmlcomplete#GetLastOpenTag("b:unaryTagsStack"))
                            	" MM: TODO: GLOT works always the same but with some weird situation it
                            	" behaves as intended in HTML but screws in PHP
                            	if opentag == '' || &filetype == 'php' && !has_key(b:html_omni, opentag)
                            		" Hack for sometimes failing GetLastOpenTag.
                            		" As far as I tested fail isn't GLOT fault but problem
                            		" of invalid document - not properly closed tags and other mish-mash.
                            		" Also when document is empty. Return list of *all* tags.
                            	    let tags = keys(b:html_omni)
                            		call filter(tags, 'v:val !~ "^vimxml"')
                            	else
                            		if has_key(b:html_omni, opentag)
                            			let tags = b:html_omni[opentag][0]
                            		else
                            			return []
                            		endif
                            	endif
                            	" }}}
                            
                            	if exists("uppercase_tag") && uppercase_tag == 1
                            		let context = tolower(context)
                            	endif
                            	" Handle XML keywords: DOCTYPE
                            	if opentag == ''
                            		let tags += [
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Frameset//EN" "http://www.w3.org/TR/REC-html40/frameset.dtd">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
                            				\ '!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/1999/xhtml">'
                            				\ ]
                            	endif
                            
                            	for m in sort(tags)
                            		if m =~ '^'.context
                            			call add(res, m)
                            		elseif m =~ context
                            			call add(res2, m)
                            		endif
                            	endfor
                            	let menu = res + res2
                            	if has_key(b:html_omni, 'vimxmltaginfo')
                            		let final_menu = []
                            		for i in range(len(menu))
                            			let item = menu[i]
                            			if has_key(b:html_omni['vimxmltaginfo'], item)
                            				let m_menu = b:html_omni['vimxmltaginfo'][item][0]
                            				let m_info = b:html_omni['vimxmltaginfo'][item][1]
                            			else
                            				let m_menu = ''
                            				let m_info = ''
                            			endif
                            			if &filetype == 'html' && exists("uppercase_tag") && uppercase_tag == 1 && item !~ 'DOCTYPE'
                            				let item = toupper(item)
                            			endif
                            			if item =~ 'DOCTYPE'
                            				let abbr = 'DOCTYPE '.matchstr(item, 'DTD \zsX\?HTML .\{-}\ze\/\/')
                            			else
                            				let abbr = item
                            			endif
                            			let final_menu += [{'abbr':abbr, 'word':item, 'menu':m_menu, 'info':m_info}]
                            		endfor
                            	else
                            		let final_menu = menu
                            	endif
                            	return final_menu
                            
                            	" }}}
                              endif
                            endfunction
                            
    1              0.000002 function! htmlcomplete#LoadData() " {{{
                            	if !exists("b:html_omni_flavor")
                            		if &filetype == 'html'
                            			let b:html_omni_flavor = 'html401t'
                            		else
                            			let b:html_omni_flavor = 'xhtml10s'
                            		endif
                            	endif
                            	" With that if we still have bloated memory but create new buffer
                            	" variables only by linking to existing g:variable, not sourcing whole
                            	" file.
                            	if exists('g:xmldata_'.b:html_omni_flavor)
                            		exe 'let b:html_omni = g:xmldata_'.b:html_omni_flavor
                            	else
                            		exe 'runtime! autoload/xml/'.b:html_omni_flavor.'.vim'
                            		exe 'let b:html_omni = g:xmldata_'.b:html_omni_flavor
                            	endif
                            endfunction
                            " }}}
    1              0.000001 function! htmlcomplete#CheckDoctype() " {{{
                            	if exists('b:html_omni_flavor')
                            		let old_flavor = b:html_omni_flavor
                            	else
                            		let old_flavor = ''
                            	endif
                            	let i = 1
                            	while i < 10 && i < line("$")
                            		let line = getline(i)
                            		if line =~ '<!DOCTYPE.*\<DTD HTML 3\.2'
                            			let b:html_omni_flavor = 'html32'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD HTML 4\.0 Transitional'
                            			let b:html_omni_flavor = 'html40t'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD HTML 4\.0 Frameset'
                            			let b:html_omni_flavor = 'html40f'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD HTML 4\.0'
                            			let b:html_omni_flavor = 'html40s'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD HTML 4\.01 Transitional'
                            			let b:html_omni_flavor = 'html401t'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD HTML 4\.01 Frameset'
                            			let b:html_omni_flavor = 'html401f'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD HTML 4\.01'
                            			let b:html_omni_flavor = 'html401s'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD XHTML 1\.0 Transitional'
                            			let b:html_omni_flavor = 'xhtml10t'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD XHTML 1\.0 Frameset'
                            			let b:html_omni_flavor = 'xhtml10f'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD XHTML 1\.0 Strict'
                            			let b:html_omni_flavor = 'xhtml10s'
                            			let b:html_doctype = 1
                            			break
                            		elseif line =~ '<!DOCTYPE.*\<DTD XHTML 1\.1'
                            			let b:html_omni_flavor = 'xhtml11'
                            			let b:html_doctype = 1
                            			break
                            		endif
                            		let i += 1
                            	endwhile
                            	if !exists("b:html_doctype")
                            		return
                            	else
                            		" Tie g:xmldata with b:html_omni this way we need to sourca data file only
                            		" once, not every time per buffer.
                            		if old_flavor == b:html_omni_flavor
                            			return
                            		else
                            			if exists('g:xmldata_'.b:html_omni_flavor)
                            				exe 'let b:html_omni = g:xmldata_'.b:html_omni_flavor
                            			else
                            				exe 'runtime! autoload/xml/'.b:html_omni_flavor.'.vim'
                            				exe 'let b:html_omni = g:xmldata_'.b:html_omni_flavor
                            			endif
                            			return
                            		endif
                            	endif
                            endfunction
                            " }}}
                            " vim:set foldmethod=marker:

FUNCTION  <SNR>3_SynSet()
    Defined: /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/syntax/synload.vim:33
Called 1 time
Total time:   0.027600
 Self time:   0.007533

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    1              0.000005   syn clear
    1              0.000004   if exists("b:current_syntax")
                                unlet b:current_syntax
    1              0.000001   endif
                            
    1              0.000004   let s = expand("<amatch>")
    1              0.000002   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    1              0.000001   elseif s == "OFF"
                                let s = ""
    1              0.000000   endif
                            
    1              0.000001   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
    2              0.000009     for name in split(s, '\.')
    1              0.000002       if !empty(name)
    1   0.024531   0.004463         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
    1              0.003013         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
    1              0.000003       endif
    2              0.000002     endfor
    1              0.000001   endif

FUNCTION  sy#sign#get_current_signs()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/sign.vim:27
Called 1 time
Total time:   0.000095
 Self time:   0.000042

count  total (s)   self (s)
    1              0.000002   let a:sy.internal = {}
    1              0.000001   let a:sy.external = {}
                            
    1   0.000062   0.000010   let signlist = sy#util#execute('sign place buffer='. a:sy.buffer)
                            
    1              0.000008   for signline in split(signlist, '\n')[2:]
                                let tokens = matchlist(signline, '\v^\s+\S+\=(\d+)\s+\S+\=(\d+)\s+\S+\=(.*)$')
                                let line   = str2nr(tokens[1])
                                let id     = str2nr(tokens[2])
                                let type   = tokens[3]
                            
                                if type =~# '^Signify'
                                  " Handle ambiguous signs. Assume you have signs on line 3 and 4.
                                  " Removing line 3 would lead to the second sign to be shifted up
                                  " to line 3. Now there are still 2 signs, both one line 3.
                                  if has_key(a:sy.internal, line)
                                    execute 'sign unplace' a:sy.internal[line].id 'buffer='.a:sy.buffer
                                  endif
                                  let a:sy.internal[line] = { 'type': type, 'id': id }
                                else
                                  let a:sy.external[line] = id
                                endif
    1              0.000001   endfor

FUNCTION  sy#util#execute()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/util.vim:107
Called 1 time
Total time:   0.000052
 Self time:   0.000052

count  total (s)   self (s)
    1              0.000003   let lang = v:lang
    1              0.000002   redir => output
    1              0.000018     silent! execute a:cmd
    1              0.000002   redir END
    1              0.000024   silent! execute 'language message' lang
    1              0.000001   return output

FUNCTION  <SNR>35_Remove_Matches()
    Defined: /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/plugin/matchparen.vim:197
Called 1 time
Total time:   0.000009
 Self time:   0.000009

count  total (s)   self (s)
    1              0.000003   if exists('w:paren_hl_on') && w:paren_hl_on
                                silent! call matchdelete(3)
                                let w:paren_hl_on = 0
    1              0.000001   endif

FUNCTION  <SNR>27_LoadFTPlugin()
    Defined: /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/ftplugin.vim:14
Called 1 time
Total time:   0.017018
 Self time:   0.009627

count  total (s)   self (s)
    1              0.000004     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    1              0.000001     endif
                            
    1              0.000004     let s = expand("<amatch>")
    1              0.000002     if s != ""
    1              0.000013       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    1              0.000001       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
    2              0.000008       for name in split(s, '\.')
    1   0.012240   0.004849         exe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
                                    " Load lua ftplugins
    1              0.004725         exe printf('runtime! ftplugin/%s.lua ftplugin/%s_*.lua ftplugin/%s/*.lua', name, name, name)
    2              0.000003       endfor
    1              0.000001     endif

FUNCTION  <SNR>74_get_base_cmd()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:501
Called 1 time
Total time:   0.000077
 Self time:   0.000032

count  total (s)   self (s)
    1              0.000003   let cmd = a:vcs_cmds[a:vcs]
    1   0.000047   0.000015   let cmd = s:replace(cmd, '%f', s:get_vcs_path(a:bufnr, a:vcs))
    1   0.000013   0.000007   let cmd = s:replace(cmd, '%d', s:difftool)
    1   0.000012   0.000006   let cmd = s:replace(cmd, '%n', s:devnull)
    1              0.000001   return cmd

FUNCTION  quick_scope#HighlightLineDelayCallback()
    Defined: ~/local/share/nvim/site/pack/packer/start/quick-scope/autoload/quick_scope.vim:40
Called 1 time
Total time:   0.000096
 Self time:   0.000027

count  total (s)   self (s)
    1   0.000034   0.000014   call quick_scope#UnhighlightLine()
    1   0.000059   0.000009   call quick_scope#HighlightLine(a:direction, a:targets)

FUNCTION  <SNR>74_handle_diff()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:116
Called 1 time
Total time:   0.000513
 Self time:   0.000105

count  total (s)   self (s)
    1   0.000026   0.000009   call sy#verbose('s:handle_diff()', a:options.vcs)
                            
    1              0.000003   if has_key(a:options, 'tempfiles')
                                for f in a:options.tempfiles
                                  call delete(f)
                                endfor
    1              0.000000   endif
                            
    1              0.000005   let sy = getbufvar(a:options.bufnr, 'sy')
    1              0.000002   if empty(sy)
                                call sy#verbose(printf('No b:sy found for %s', bufname(a:options.bufnr)), a:options.vcs)
                                return
    1              0.000003   elseif !empty(sy.updated_by) && sy.updated_by != a:options.vcs
                                call sy#verbose(printf('Signs already got updated by %s.', sy.updated_by), a:options.vcs)
                                return
    1              0.000002   elseif empty(sy.vcs)
                                let sy.detecting -= 1
    1              0.000000   endif
                            
    1              0.000008   let fenc = getbufvar(a:options.bufnr, '&fenc')
    1              0.000005   let enc  = getbufvar(a:options.bufnr, '&enc')
    1              0.000003   if (fenc != enc) && has('iconv')
                                call map(a:options.stdoutbuf, printf('iconv(v:val, "%s", "%s")', fenc, enc))
    1              0.000000   endif
                            
    1   0.000017   0.000013   let [found_diff, diff] = s:check_diff_{a:options.difftool}(a:exitval, a:options.stdoutbuf)
    1              0.000001   if found_diff
    1              0.000003     if index(sy.vcs, a:options.vcs) == -1
                                  let sy.vcs += [a:options.vcs]
    1              0.000001     endif
    1   0.000395   0.000008     call a:options.func(sy, a:options.vcs, diff)
                              else
                                call sy#verbose('No valid diff found. Disabling this VCS.', a:options.vcs)
    1              0.000000   endif
                            
    1              0.000004   call setbufvar(a:options.bufnr, 'sy_job_id_'.a:options.vcs, 0)

FUNCTION  sy#sign#set_signs()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/sign.vim:235
Called 1 time
Total time:   0.000387
 Self time:   0.000049

count  total (s)   self (s)
    1   0.000020   0.000008   call sy#verbose('sy#sign#set_signs()', a:vcs)
                            
    1              0.000004   if a:sy.stats == [-1, -1, -1]
                                let a:sy.stats = [0, 0, 0]
    1              0.000000   endif
                            
    1              0.000001   if empty(a:diff)
                                call sy#verbose('No changes found.', a:vcs)
                                let a:sy.stats = [0, 0, 0]
                                call sy#sign#remove_all_signs(a:sy.buffer)
                                return
    1              0.000000   endif
                            
    1              0.000002   if get(g:, 'signify_line_highlight')
                                call sy#highlight#line_enable()
    1              0.000000   else
    1   0.000052   0.000007     call sy#highlight#line_disable()
    1              0.000001   endif
                            
    1   0.000289   0.000008   call sy#sign#process_diff(a:sy, a:vcs, a:diff)
                            
    1              0.000005   if exists('#User#Signify')
                                doautocmd <nomodeline> User Signify
    1              0.000000   endif

FUNCTION  sy#highlight#line_disable()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/highlight.vim:42
Called 1 time
Total time:   0.000045
 Self time:   0.000045

count  total (s)   self (s)
    1              0.000019   execute 'sign define SignifyAdd text='. s:sign_add 'texthl=SignifySignAdd linehl='
    1              0.000008   execute 'sign define SignifyChange text='. s:sign_change 'texthl=SignifySignChange linehl='
    1              0.000008   execute 'sign define SignifyChangeDelete text='. s:sign_change_delete 'texthl=SignifySignChangeDelete linehl='
    1              0.000006   execute 'sign define SignifyRemoveFirstLine text='. s:sign_delete_first_line 'texthl=SignifySignDeleteFirstLine linehl='
    1              0.000002   let g:signify_line_highlight = 0

FUNCTION  <SNR>66_wrap()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-slash/plugin/slash.vim:23
Called 2 times
Total time:   0.000044
 Self time:   0.000044

count  total (s)   self (s)
    2              0.000029   if mode() == 'c' && stridx('/?', getcmdtype()) < 0
    2              0.000008     return a:seq
                              endif
                              silent! autocmd! slash
                              set hlsearch
                              return a:seq."\<plug>(slash-trailer)"

FUNCTION  <SNR>74_callback_nvim_exit()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:21
Called 1 time
Total time:   0.000527
 Self time:   0.000015

count  total (s)   self (s)
    1   0.000526   0.000013   return s:handle_diff(self, a:exitval)

FUNCTION  htmlcomplete#DetectOmniFlavor()
    Defined: /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/autoload/htmlcomplete.vim:9
Called 1 time
Total time:   0.000044
 Self time:   0.000044

count  total (s)   self (s)
    1              0.000003   if &filetype == 'xhtml'
                                let b:html_omni_flavor = 'xhtml10s'
    1              0.000001   else
    1              0.000002     let b:html_omni_flavor = 'html401t'
    1              0.000001   endif
    1              0.000001   let i = 1
    1              0.000001   let line = ""
    1              0.000004   while i < 10 && i < line("$")
                                let line = getline(i)
                                if line =~ '<!DOCTYPE.*\<DTD '
                                  break
                                endif
                                let i += 1
    1              0.000001   endwhile
    1              0.000006   if line =~ '<!DOCTYPE.*\<DTD '  " doctype line found above
                                if line =~ ' HTML 3\.2'
                                  let b:html_omni_flavor = 'html32'
                                elseif line =~ ' XHTML 1\.1'
                                  let b:html_omni_flavor = 'xhtml11'
                                else    " two-step detection with strict/frameset/transitional
                                  if line =~ ' XHTML 1\.0'
                            	let b:html_omni_flavor = 'xhtml10'
                                  elseif line =~ ' HTML 4\.01'
                            	let b:html_omni_flavor = 'html401'
                                  elseif line =~ ' HTML 4.0\>'
                            	let b:html_omni_flavor = 'html40'
                                  endif
                                  if line =~ '\<Transitional\>'
                            	let b:html_omni_flavor .= 't'
                                  elseif line =~ '\<Frameset\>'
                            	let b:html_omni_flavor .= 'f'
                                  else
                            	let b:html_omni_flavor .= 's'
                                  endif
                                endif
    1              0.000000   endif

FUNCTION  <SNR>35_Highlight_Matching_Pair()
    Defined: /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/plugin/matchparen.vim:40
Called 1 time
Total time:   0.000090
 Self time:   0.000081

count  total (s)   self (s)
                              " Remove any previous match.
    1   0.000018   0.000009   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
    1              0.000004   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
    1              0.000000   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
    1              0.000003   let c_lnum = line('.')
    1              0.000002   let c_col = col('.')
    1              0.000001   let before = 0
                            
    1              0.000003   let text = getline(c_lnum)
    1              0.000016   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
    1              0.000002   if empty(matches)
                                let [c_before, c] = ['', '']
    1              0.000001   else
    1              0.000004     let [c_before, c] = matches[1:2]
    1              0.000001   endif
    1              0.000014   let plist = split(&matchpairs, '.\zs[:,]')
    1              0.000003   let i = index(plist, c)
    1              0.000001   if i < 0
                                " not found, in Insert mode try character before the cursor
    1              0.000003     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
    1              0.000001     endif
    1              0.000001     if i < 0
                                  " not found, nothing to do
    1              0.000001       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
                              else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
                                let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
                                try
                                  execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
                                endtry
                              endif
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
                              endif
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
                                if exists('*matchaddpos')
                                  call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTION  <SNR>74_check_diff_git()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:161
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return a:exitval ? [0, []] : [1, a:diff]

FUNCTION  quick_scope#HighlightLineDelay()
    Defined: ~/local/share/nvim/site/pack/packer/start/quick-scope/autoload/quick_scope.vim:47
Called 2 times
Total time:   0.000056
 Self time:   0.000056

count  total (s)   self (s)
    2              0.000006   if g:qs_enable && g:qs_delay > 0
    2              0.000008     call timer_stop(s:timer)
    2              0.000014     let Cb = function('quick_scope#HighlightLineDelayCallback', [a:direction, a:targets])
    2              0.000013     let s:timer = timer_start(g:qs_delay, Cb)
                              else
                                call quick_scope#UnhighlightLine()
                                call quick_scope#HighlightLine(a:direction, a:targets)
    2              0.000001   endif

FUNCTION  <SNR>74_wrap_cmd()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:469
Called 1 time
Total time:   0.000026
 Self time:   0.000026

count  total (s)   self (s)
    1              0.000003   if has('win32')
                                if has('nvim')
                                  let cmd = &shell =~ '\v%(cmd|powershell|pwsh)' ? a:cmd : ['sh', '-c', a:cmd]
                                else
                                  if &shell =~ 'cmd'
                                    let cmd = join([&shell, &shellcmdflag, '(', a:cmd, ')'])
                                  elseif empty(&shellxquote)
                                    let cmd = join([&shell, &shellcmdflag, &shellquote, a:cmd, &shellquote])
                                  else
                                    let cmd = join([&shell, &shellcmdflag, &shellxquote, a:cmd, &shellxquote])
                                  endif
                                endif
    1              0.000000   else
    1              0.000002     let cmd = ['sh', '-c', a:cmd]
    1              0.000001   endif
    1              0.000004   let options = { 'stdoutbuf': [''], 'vcs': a:vcs, 'bufnr': a:bufnr, }
    1              0.000002   return [cmd, options]

FUNCTION  <SNR>72_get_path()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy.vim:156
Called 2 times
Total time:   0.000091
 Self time:   0.000091

count  total (s)   self (s)
    2              0.000074   let path = resolve(fnamemodify(bufname(a:bufnr), ':p'))
    2              0.000007   if has('win32')
                                let path = substitute(path, '\v^(\w):\\\\', '\1:\\', '')
    2              0.000001   endif
    2              0.000003   return path

FUNCTION  quick_scope#HighlightLine()
    Defined: ~/local/share/nvim/site/pack/packer/start/quick-scope/autoload/quick_scope.vim:15
Called 1 time
Total time:   0.000049
 Self time:   0.000049

count  total (s)   self (s)
    1              0.000017   if g:qs_enable && (!exists('b:qs_local_disable') || !b:qs_local_disable) && index(get(g:, 'qs_buftype_blacklist', []), &buftype) < 0 && index(get(g:, 'qs_filetype_blacklist', []), &filetype) < 0
    1              0.000005     let line = getline(line('.'))
    1              0.000003     let len = strlen(line)
    1              0.000002     let pos = col('.')
                            
    1              0.000002     if !empty(line) && len <= g:qs_max_chars
                                  " Highlight after the cursor.
                                  if a:direction != 0
                                    let [patt_p, patt_s] = s:get_highlight_patterns(line, pos, len, a:targets)
                                    call s:apply_highlight_patterns([patt_p, patt_s])
                                  endif
                            
                                  " Highlight before the cursor.
                                  if a:direction != 1
                                    let [patt_p, patt_s] = s:get_highlight_patterns(line, pos, -1, a:targets)
                                    call s:apply_highlight_patterns([patt_p, patt_s])
                                  endif
    1              0.000001     endif
    1              0.000001   endif

FUNCTION  quick_scope#UnhighlightLine()
    Defined: ~/local/share/nvim/site/pack/packer/start/quick-scope/autoload/quick_scope.vim:64
Called 2 times
Total time:   0.000048
 Self time:   0.000048

count  total (s)   self (s)
    3              0.000033   for m in filter(getmatches(), printf('v:val.group ==# "%s" || v:val.group ==# "%s"', g:qs_hi_group_primary, g:qs_hi_group_secondary))
    1              0.000004     call matchdelete(m.id)
    3              0.000003   endfor

FUNCTION  <SNR>74_callback_nvim_stdout()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:15
Called 1 time
Total time:   0.000020
 Self time:   0.000020

count  total (s)   self (s)
    1              0.000012   let self.stdoutbuf[-1] .= a:data[0]
    1              0.000006   call extend(self.stdoutbuf, a:data[1:])

FUNCTION  sy#start()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy.vim:7
Called 2 times
Total time:   0.002562
 Self time:   0.000210

count  total (s)   self (s)
    2              0.000007   if g:signify_locked
                                call sy#verbose('Locked.')
                                return
    2              0.000002   endif
                            
    2              0.000014   let bufnr = a:0 && has_key(a:1, 'bufnr') ? a:1.bufnr : bufnr('')
    2              0.000007   let sy = getbufvar(bufnr, 'sy')
                            
    2              0.000004   if empty(sy)
    1   0.000049   0.000010     let path = s:get_path(bufnr)
    1   0.000020   0.000007     if s:skip(bufnr, path)
    1   0.000020   0.000006       call sy#verbose('Skip file: '. path)
    1              0.000001       return
                                endif
                                call sy#verbose('Register new file: '. path)
                                let new_sy = { 'path':       path, 'buffer':     bufnr, 'detecting':  0, 'vcs':        [], 'hunks':      [], 'signid':     0x100, 'updated_by': '', 'stats':      [-1, -1, -1], 'info':       {    'dir':  fnamemodify(path, ':p:h'),    'path': sy#util#escape(path),    'file': sy#util#escape(fnamemodify(path, ':t')) }}
                                call setbufvar(bufnr, 'sy', new_sy)
                                call sy#set_buflocal_autocmds(bufnr)
                                call sy#repo#detect(bufnr)
    1              0.000006   elseif has('vim_starting')
                                call sy#verbose("Don't run Sy more than once during startup.")
                                return
    1              0.000001   else
    1   0.000064   0.000012     let path = s:get_path(bufnr)
    1              0.000011     if !filereadable(path)
                                  call sy#stop()
                                  return
    1              0.000002     elseif empty(sy.vcs)
                                  if get(sy, 'retry')
                                    let sy.retry = 0
                                    call sy#verbose('Redetecting VCS.')
                                    call sy#repo#detect(sy.buffer)
                                  else
                                    if get(sy, 'detecting')
                                      call sy#verbose('Detection is already in progress.')
                                    else
                                      call sy#verbose('No VCS found. Disabling.')
                                      call sy#stop(sy.buffer)
                                    endif
                                  endif
    1              0.000000     else
    2              0.000006       for vcs in sy.vcs
    1              0.000004         let job_id = getbufvar(sy.buffer, 'sy_job_id_'. vcs, 0)
    1              0.000003         if type(job_id) != type(0) || job_id > 0
                                      call sy#verbose('Update is already in progress.', vcs)
    1              0.000000         else
    1   0.000022   0.000007           call sy#verbose('Updating signs.', vcs)
    1   0.002239   0.000021           call sy#repo#get_diff(sy.buffer, vcs, function('sy#sign#set_signs'))
    1              0.000001         endif
    2              0.000004       endfor
    1              0.000001     endif
    1              0.000000   endif

FUNCTION  <SNR>74_initialize_job()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:448
Called 1 time
Total time:   0.000119
 Self time:   0.000016

count  total (s)   self (s)
    1   0.000119   0.000015   return s:wrap_cmd(a:bufnr, a:vcs, s:get_base_cmd(a:bufnr, a:vcs, g:signify_vcs_cmds))

FUNCTION  sy#sign#process_diff()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/sign.vim:55
Called 1 time
Total time:   0.000282
 Self time:   0.000176

count  total (s)   self (s)
    1              0.000004   let a:sy.signtable             = {}
    1              0.000002   let a:sy.hunks                 = []
    1              0.000003   let [added, modified, deleted] = [0, 0, 0]
                            
    1   0.000101   0.000007   call sy#sign#get_current_signs(a:sy)
                            
                              " Determine where we have to put our signs.
    1              0.000009   for line in filter(a:diff, 'v:val =~ "^@@ "')
                                let a:sy.lines = []
                                let ids        = []
                            
                                let [old_line, old_count, new_line, new_count] = sy#sign#parse_hunk(line)
                            
                                " Workaround for non-conventional diff output in older Fossil versions:
                                " https://fossil-scm.org/forum/forumpost/834ce0f1e1
                                " Fixed as of: https://fossil-scm.org/index.html/info/7fd2a3652ea7368a
                                if a:vcs == 'fossil' && new_line == 0
                                  let new_line = old_line - 1 - deleted
                                endif
                            
                                " Pure add:
                            
                                " @@ -5,0 +6,2 @@ this is line 5
                                " +this is line 5
                                " +this is line 5
                                if old_count == 0 && new_count > 0
                                  let added += new_count
                                  let offset = 0
                                  while offset < new_count
                                    let line    = new_line + offset
                                    let offset += 1
                                    if s:external_sign_present(a:sy, line) | continue | endif
                                    call add(ids, s:add_sign(a:sy, line, 'SignifyAdd'))
                                  endwhile
                            
                                " Pure delete
                            
                                " @@ -6,2 +5,0 @@ this is line 5
                                " -this is line 6
                                " -this is line 7
                                elseif old_count > 0 && new_count == 0
                                  if s:external_sign_present(a:sy, new_line) | continue | endif
                                  let deleted += old_count
                                  if new_line == 0
                                    call add(ids, s:add_sign(a:sy, 1, 'SignifyRemoveFirstLine'))
                                  elseif s:sign_show_count
                                    if old_count > 99
                                      let text = s:sign_delete . '>'
                                    elseif old_count < 2
                                      let text = s:sign_delete
                                    else
                                      let text = s:sign_delete . old_count
                                    endif
                                    while strwidth(text) > 2
                                      let text = substitute(text, '.', '', '')
                                    endwhile
                                    call add(ids, s:add_sign(a:sy, new_line, 'SignifyDelete'. old_count, text))
                                  else
                                    call add(ids, s:add_sign(a:sy, new_line, 'SignifyDeleteMore', s:sign_delete))
                                  endif
                                " All lines are modified.
                                elseif old_count > 0 && new_count > 0 && old_count == new_count
                                  let modified += new_count
                                  let offset = 0
                                  while offset < new_count
                                    let line    = new_line + offset
                                    let offset += 1
                                    if s:external_sign_present(a:sy, line) | continue | endif
                                    call add(ids, s:add_sign(a:sy, line, 'SignifyChange'))
                                  endwhile
                                " Some lines are modified and some new lines are added.
                                elseif old_count > 0 && new_count > 0 && old_count < new_count
                                  let modified += old_count
                                  let added += new_count - old_count
                                  let offset = 0
                                  while offset < old_count
                                    let line    = new_line + offset
                                    let offset += 1
                                    if s:external_sign_present(a:sy, line) | continue | endif
                                    call add(ids, s:add_sign(a:sy, line, 'SignifyChange'))
                                  endwhile
                                  while offset < new_count
                                    let line    = new_line + offset
                                    let offset += 1
                                    if s:external_sign_present(a:sy, line) | continue | endif
                                    call add(ids, s:add_sign(a:sy, line, 'SignifyAdd'))
                                  endwhile
                                " Some lines are modified and some lines are deleted.
                                elseif old_count > 0 && new_count > 0 && old_count > new_count
                                  let modified += new_count
                                  let deleted_count = old_count - new_count
                                  let deleted += deleted_count
                            
                                  let prev_line_available = new_line > 1 && !get(a:sy.signtable, new_line - 1, 0)
                                  if prev_line_available
                                    if s:sign_show_count
                                      if deleted_count > 99
                                        let text = s:sign_delete . '>'
                                      elseif deleted_count < 2
                                        let text = s:sign_delete
                                      else
                                        let text = s:sign_delete . deleted_count
                                      endif
                                      while strwidth(text) > 2
                                        let text = substitute(text, '.', '', '')
                                      endwhile
                                      call add(ids, s:add_sign(a:sy, new_line - 1, 'SignifyDelete'. deleted_count, text))
                                    else
                                      call add(ids, s:add_sign(a:sy, new_line - 1, 'SignifyDeleteMore', s:sign_delete))
                                    endif
                                  endif
                            
                                  let offset = 0
                                  while offset < new_count
                                    let line    = new_line + offset
                                    if s:external_sign_present(a:sy, line) | continue | endif
                                    if !prev_line_available && offset == 0
                                      call add(ids, s:add_sign(a:sy, line, 'SignifyChangeDelete'))
                                    else
                                      call add(ids, s:add_sign(a:sy, line, 'SignifyChange'))
                                    endif
                                    let offset += 1
                                  endwhile
                                endif
                            
                                if !empty(ids)
                                  call add(a:sy.hunks, { 'ids'  : ids, 'start': a:sy.lines[0], 'end'  : a:sy.lines[-1] })
                                endif
    1              0.000003   endfor
                            
                              " Remove obsoleted signs.
    1              0.000005   for line in filter(keys(a:sy.internal), '!has_key(a:sy.signtable, v:val)')
                                execute 'sign unplace' a:sy.internal[line].id 'buffer='.a:sy.buffer
    1              0.000001   endfor
                            
    1              0.000003   if empty(a:sy.updated_by) && empty(a:sy.hunks)
    1   0.000020   0.000009     call sy#verbose('Successful exit value, but no diff. Keep VCS for time being.', a:vcs)
    1              0.000001     return
                              endif
                            
                              call sy#verbose('Signs updated.', a:vcs)
                              let a:sy.updated_by = a:vcs
                              if len(a:sy.vcs) > 1
                                call sy#verbose('Disable all other VCS.', a:vcs)
                                let a:sy.vcs = [a:vcs]
                              endif
                            
                              let a:sy.stats = [added, modified, deleted]

FUNCTION  quick_scope#StopTimer()
    Defined: ~/local/share/nvim/site/pack/packer/start/quick-scope/autoload/quick_scope.vim:58
Called 1 time
Total time:   0.000009
 Self time:   0.000009

count  total (s)   self (s)
    1              0.000002   if g:qs_delay > 0
    1              0.000004     call timer_stop(s:timer)
    1              0.000001   endif

FUNCTION  <SNR>72_skip()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy.vim:165
Called 1 time
Total time:   0.000014
 Self time:   0.000014

count  total (s)   self (s)
    1              0.000012   if getbufvar(a:bufnr, '&diff') || !filereadable(a:path)
    1              0.000001     return 1
                              endif
                            
                              if exists('g:signify_skip_filetype')
                                if has_key(g:signify_skip_filetype, getbufvar(a:bufnr, '&filetype'))
                                  return 1
                                elseif has_key(g:signify_skip_filetype, 'help') && getbufvar(a:bufnr, '&buftype') == 'help'
                                  return 1
                                endif
                              endif
                            
                              if exists('g:signify_skip_filename') && has_key(g:signify_skip_filename, a:path)
                                return 1
                              endif
                            
                              " DEPRECATED: Use g:signify_skip.pattern instead.
                              if exists('g:signify_skip_filename_pattern')
                                for pattern in g:signify_skip_filename_pattern
                                  if a:path =~ pattern
                                    return 1
                                  endif
                                endfor
                              endif
                            
                              if exists('g:signify_skip')
                                if has_key(g:signify_skip, 'pattern')
                                  for pattern in g:signify_skip.pattern
                                    if a:path =~ pattern
                                      return 1
                                    endif
                                  endfor
                                endif
                              endif
                            
                              return 0

FUNCTION  <SNR>74_get_vcs_path()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:494
Called 1 time
Total time:   0.000021
 Self time:   0.000021

count  total (s)   self (s)
    1              0.000020   return (a:vcs =~# '\v(git|cvs|accurev|tfs|yadm)') ? getbufvar(a:bufnr, 'sy').info.file : getbufvar(a:bufnr, 'sy').info.path

FUNCTION  sy#verbose()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy.vim:114
Called 6 times
Total time:   0.000080
 Self time:   0.000080

count  total (s)   self (s)
    6              0.000009   if &verbose
                                if type(a:msg) == type([])
                                  for msg in a:msg
                                    echomsg printf('[sy%s] %s', (a:0 ? ':'.a:1 : ''), msg)
                                  endfor
                                else
                                  echomsg printf('[sy%s] %s', (a:0 ? ':'.a:1 : ''), a:msg)
                                endif
    6              0.000003   endif

FUNCTION  <SNR>74_replace()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:529
Called 3 times
Total time:   0.000024
 Self time:   0.000024

count  total (s)   self (s)
    3              0.000014   let parts = split(a:cmd, a:pat, 1)
    3              0.000008   return join(parts, a:sub)

FUNCTION  peekaboo#on()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-peekaboo/plugin/peekaboo.vim:27
Called 1 time
Total time:   0.000083
 Self time:   0.000083

count  total (s)   self (s)
    1              0.000002   if get(b:, 'peekaboo_on', 0)
                                return
    1              0.000001   endif
                            
    1              0.000003   let prefix = get(g:, 'peekaboo_prefix', '')
    1              0.000002   let ins_prefix = get(g:, 'peekaboo_ins_prefix', '')
    1              0.000038   execute 'nmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  0)'
    1              0.000010   execute 'xmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  1)'
    1              0.000009   execute 'nmap <buffer> <expr> '.prefix.    '@     peekaboo#peek(v:count1, ''@'', 0)'
    1              0.000010   execute 'imap <buffer> <expr> '.ins_prefix.'<c-r> peekaboo#peek(1, "\<c-r>",  0)'
    1              0.000002   let b:peekaboo_on = 1
    1              0.000001   return ''

FUNCTION  sy#repo#get_diff()
    Defined: ~/local/share/nvim/site/pack/packer/start/vim-signify/autoload/sy/repo.vim:72
Called 1 time
Total time:   0.002218
 Self time:   0.002088

count  total (s)   self (s)
    1   0.000016   0.000005   call sy#verbose('sy#repo#get_diff()', a:vcs)
                            
    1              0.000003   let job_id = getbufvar(a:bufnr, 'sy_job_id_'.a:vcs)
                            
    1              0.000004   if getbufvar(a:bufnr, '&modified')
                                let [cmd, options] = s:initialize_buffer_job(a:bufnr, a:vcs)
                                let options.difftool = 'diff'
    1              0.000000   else
    1   0.000129   0.000010     let [cmd, options] = s:initialize_job(a:bufnr, a:vcs)
    1              0.000002     let options.difftool = a:vcs
    1              0.000000   endif
                            
    1              0.000002   let options.func = a:func
                            
    1              0.000002   if has('nvim')
    1              0.000001     if job_id
                                  silent! call jobstop(job_id)
    1              0.000001     endif
    1              0.002006     let job_id = jobstart(cmd, extend(options, { 'cwd':       getbufvar(a:bufnr, 'sy').info.dir, 'on_stdout': function('s:callback_nvim_stdout'), 'on_exit':   function('s:callback_nvim_exit'), }))
    1              0.000011     call setbufvar(a:bufnr, 'sy_job_id_'.a:vcs, job_id)
                              elseif has('patch-8.0.902')
                                if type(job_id) != type(0)
                                  silent! call job_stop(job_id)
                                endif
                                let opts = { 'cwd':      getbufvar(a:bufnr, 'sy').info.dir, 'in_io':    'null', 'out_cb':   function('s:callback_vim_stdout', options), 'close_cb': function('s:callback_vim_close', options), }
                                let job_id = job_start(cmd, opts)
                                call setbufvar(a:bufnr, 'sy_job_id_'.a:vcs, job_id)
                              else
                                let options.stdoutbuf = split(s:run(a:vcs), '\n')
                                call s:handle_diff(options, v:shell_error)
    1              0.000001   endif

FUNCTION  <SNR>28_LoadIndent()
    Defined: /gctmp/jesmith/.mount_nvim3TfHqK/usr/share/nvim/runtime/indent.vim:13
Called 1 time
Total time:   0.003552
 Self time:   0.003552

count  total (s)   self (s)
    1              0.000004     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    1              0.000001     endif
    1              0.000004     let s = expand("<amatch>")
    1              0.000002     if s != ""
    1              0.000002       if exists("b:did_indent")
                            	unlet b:did_indent
    1              0.000013       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
    2              0.000007       for name in split(s, '\.')
    1              0.001943         exe 'runtime! indent/' . name . '.vim'
    1              0.001564         exe 'runtime! indent/' . name . '.lua'
    2              0.000003       endfor
    1              0.000001     endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
    1   0.027600   0.007533  <SNR>3_SynSet()
    1   0.017018   0.009627  <SNR>27_LoadFTPlugin()
    1   0.003552             <SNR>28_LoadIndent()
    2   0.002562   0.000210  sy#start()
    1   0.002218   0.002088  sy#repo#get_diff()
    1   0.000527   0.000015  <SNR>74_callback_nvim_exit()
    1   0.000513   0.000105  <SNR>74_handle_diff()
    1   0.000387   0.000049  sy#sign#set_signs()
    1   0.000282   0.000176  sy#sign#process_diff()
    1   0.000119   0.000016  <SNR>74_initialize_job()
    1   0.000096   0.000027  quick_scope#HighlightLineDelayCallback()
    1   0.000095   0.000042  sy#sign#get_current_signs()
    2   0.000091             <SNR>72_get_path()
    1   0.000090   0.000081  <SNR>35_Highlight_Matching_Pair()
    1   0.000083             peekaboo#on()
    6   0.000080             sy#verbose()
    1   0.000077   0.000032  <SNR>74_get_base_cmd()
    2   0.000056             quick_scope#HighlightLineDelay()
    1   0.000052             sy#util#execute()
    1   0.000049             quick_scope#HighlightLine()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
    1   0.017018   0.009627  <SNR>27_LoadFTPlugin()
    1   0.027600   0.007533  <SNR>3_SynSet()
    1              0.003552  <SNR>28_LoadIndent()
    1   0.002218   0.002088  sy#repo#get_diff()
    2   0.002562   0.000210  sy#start()
    1   0.000282   0.000176  sy#sign#process_diff()
    1   0.000513   0.000105  <SNR>74_handle_diff()
    2              0.000091  <SNR>72_get_path()
    1              0.000083  peekaboo#on()
    1   0.000090   0.000081  <SNR>35_Highlight_Matching_Pair()
    6              0.000080  sy#verbose()
    2              0.000056  quick_scope#HighlightLineDelay()
    1              0.000052  sy#util#execute()
    1              0.000049  quick_scope#HighlightLine()
    1   0.000387   0.000049  sy#sign#set_signs()
    2              0.000048  quick_scope#UnhighlightLine()
    1              0.000045  sy#highlight#line_disable()
    2              0.000044  <SNR>66_wrap()
    1              0.000044  htmlcomplete#DetectOmniFlavor()
    1   0.000095   0.000042  sy#sign#get_current_signs()

